{
  "id": "CVE-2025-29786",
  "sourceIdentifier": "security-advisories@github.com",
  "published": "2025-03-17T14:15:22.237",
  "lastModified": "2025-03-17T14:15:22.237",
  "vulnStatus": "Awaiting Analysis",
  "cveTags": [

  ],
  "descriptions": [
    {
      "lang": "en",
      "value": "Expr is an expression language and expression evaluation for Go. Prior to version 1.17.0, if the Expr expression parser is given an unbounded input string, it will attempt to compile the entire string and generate an Abstract Syntax Tree (AST) node for each part of the expression. In scenarios where input size isn’t limited, a malicious or inadvertent extremely large expression can consume excessive memory as the parser builds a huge AST. This can ultimately lead to*excessive memory usage and an Out-Of-Memory (OOM) crash of the process. This issue is relatively uncommon and will only manifest when there are no restrictions on the input size, i.e. the expression length is allowed to grow arbitrarily large. In typical use cases where inputs are bounded or validated, this problem would not occur. The problem has been patched in the latest versions of the Expr library. The fix introduces compile-time limits on the number of AST nodes and memory usage during parsing, preventing any single expression from exhausting resources. Users should upgrade to Expr version 1.17.0 or later, as this release includes the new node budget and memory limit safeguards. Upgrading to v1.17.0 ensures that extremely deep or large expressions are detected and safely aborted during compilation, avoiding the OOM condition. For users who cannot immediately upgrade, the recommended workaround is to impose an input size restriction before parsing. In practice, this means validating or limiting the length of expression strings that your application will accept. For example, set a maximum allowable number of characters (or nodes) for any expression and reject or truncate inputs that exceed this limit. By ensuring no unbounded-length expression is ever fed into the parser, one can prevent the parser from constructing a pathologically large AST and avoid potential memory exhaustion. In short, pre-validate and cap input size as a safeguard in the absence of the patch."
    },
    {
      "lang": "es",
      "value": "Expr es un lenguaje de expresiones y un sistema de evaluación de expresiones para Go. Antes de la versión 1.17.0, si el analizador de expresiones Expr recibía una cadena de entrada ilimitada, intentaba compilarla completa y generar un nodo de Árbol de Sintaxis Abstracta (AST) para cada parte de la expresión. En escenarios donde el tamaño de entrada no está limitado, una expresión extremadamente grande, maliciosa o inadvertida, puede consumir demasiada memoria mientras el analizador construye un AST enorme. Esto puede provocar un uso excesivo de memoria y un fallo del proceso por falta de memoria (OOM). Este problema es relativamente poco común y solo se manifiesta cuando no hay restricciones en el tamaño de entrada, es decir, cuando se permite que la longitud de la expresión crezca arbitrariamente. En casos de uso típicos donde las entradas están limitadas o validadas, este problema no se producía. El problema se ha corregido en las últimas versiones de la librería Expr. La corrección introduce límites en tiempo de compilación en el número de nodos AST y el uso de memoria durante el análisis, lo que evita que una sola expresión agote los recursos. Los usuarios deben actualizar a la versión 1.17.0 de Expr o posterior, ya que esta versión incluye las nuevas protecciones de presupuesto de nodos y límite de memoria. Actualizar a la versión 1.17.0 garantiza la detección y cancelación segura de expresiones extremadamente profundas o grandes durante la compilación, evitando así la condición OOM. Para los usuarios que no puedan actualizar inmediatamente, el workaround recomendada es imponer una restricción de tamaño de entrada antes del análisis. En la práctica, esto significa validar o limitar la longitud de las cadenas de expresión que acepta la aplicación. Por ejemplo, establezca un número máximo permitido de caracteres (o nodos) para cualquier expresión y rechace o trunque las entradas que superen este límite. Al garantizar que nunca se introduzca ninguna expresión de longitud ilimitada en el analizador, se puede evitar que el analizador construya un AST patológicamente grande y evitar el posible agotamiento de la memoria. En resumen, valide previamente y limite el tamaño de entrada como medida de seguridad en ausencia del parche."
    }
  ],
  "metrics": {
    "cvssMetricV31": [
      {
        "source": "security-advisories@github.com",
        "type": "Secondary",
        "cvssData": {
          "version": "3.1",
          "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "baseScore": 7.5,
          "baseSeverity": "HIGH",
          "attackVector": "NETWORK",
          "attackComplexity": "LOW",
          "privilegesRequired": "NONE",
          "userInteraction": "NONE",
          "scope": "UNCHANGED",
          "confidentialityImpact": "NONE",
          "integrityImpact": "NONE",
          "availabilityImpact": "HIGH"
        },
        "exploitabilityScore": 3.9,
        "impactScore": 3.6
      }
    ]
  },
  "weaknesses": [
    {
      "source": "security-advisories@github.com",
      "type": "Primary",
      "description": [
        {
          "lang": "en",
          "value": "CWE-770"
        }
      ]
    }
  ],
  "references": [
    {
      "url": "https://github.com/expr-lang/expr/pull/762",
      "source": "security-advisories@github.com"
    },
    {
      "url": "https://github.com/expr-lang/expr/security/advisories/GHSA-93mq-9ffx-83m2",
      "source": "security-advisories@github.com"
    }
  ]
}