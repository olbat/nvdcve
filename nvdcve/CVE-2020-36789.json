{
  "cve": {
    "data_type": "CVE",
    "data_format": "MITRE",
    "data_version": "4.0",
    "CVE_data_meta": {
      "ID": "CVE-2020-36789",
      "ASSIGNER": "cve@kernel.org"
    },
    "problemtype": {
      "problemtype_data": [
        {
          "description": []
        }
      ]
    },
    "references": {
      "reference_data": [
        {
          "url": "https://git.kernel.org/stable/c/2283f79b22684d2812e5c76fc2280aae00390365",
          "name": "https://git.kernel.org/stable/c/2283f79b22684d2812e5c76fc2280aae00390365",
          "refsource": "",
          "tags": []
        },
        {
          "url": "https://git.kernel.org/stable/c/248b71ce92d4f3a574b2537f9838f48e892618f4",
          "name": "https://git.kernel.org/stable/c/248b71ce92d4f3a574b2537f9838f48e892618f4",
          "refsource": "",
          "tags": []
        },
        {
          "url": "https://git.kernel.org/stable/c/3a922a85701939624484e7f2fd07d32beed00d25",
          "name": "https://git.kernel.org/stable/c/3a922a85701939624484e7f2fd07d32beed00d25",
          "refsource": "",
          "tags": []
        },
        {
          "url": "https://git.kernel.org/stable/c/451187b20431924d13fcfecc500d7cd2d9951bac",
          "name": "https://git.kernel.org/stable/c/451187b20431924d13fcfecc500d7cd2d9951bac",
          "refsource": "",
          "tags": []
        },
        {
          "url": "https://git.kernel.org/stable/c/7e4cf2ec0ca236c3e5f904239cec6efe1f3baf22",
          "name": "https://git.kernel.org/stable/c/7e4cf2ec0ca236c3e5f904239cec6efe1f3baf22",
          "refsource": "",
          "tags": []
        },
        {
          "url": "https://git.kernel.org/stable/c/87530b557affe01c764de32dbeb58cdf47234574",
          "name": "https://git.kernel.org/stable/c/87530b557affe01c764de32dbeb58cdf47234574",
          "refsource": "",
          "tags": []
        },
        {
          "url": "https://git.kernel.org/stable/c/ab46748bf98864f9c3f5559060bf8caf9df2b41e",
          "name": "https://git.kernel.org/stable/c/ab46748bf98864f9c3f5559060bf8caf9df2b41e",
          "refsource": "",
          "tags": []
        }
      ]
    },
    "description": {
      "description_data": [
        {
          "lang": "en",
          "value": "In the Linux kernel, the following vulnerability has been resolved:\n\ncan: dev: can_get_echo_skb(): prevent call to kfree_skb() in hard IRQ context\n\nIf a driver calls can_get_echo_skb() during a hardware IRQ (which is often, but\nnot always, the case), the 'WARN_ON(in_irq)' in\nnet/core/skbuff.c#skb_release_head_state() might be triggered, under network\ncongestion circumstances, together with the potential risk of a NULL pointer\ndereference.\n\nThe root cause of this issue is the call to kfree_skb() instead of\ndev_kfree_skb_irq() in net/core/dev.c#enqueue_to_backlog().\n\nThis patch prevents the skb to be freed within the call to netif_rx() by\nincrementing its reference count with skb_get(). The skb is finally freed by\none of the in-irq-context safe functions: dev_consume_skb_any() or\ndev_kfree_skb_any(). The \"any\" version is used because some drivers might call\ncan_get_echo_skb() in a normal context.\n\nThe reason for this issue to occur is that initially, in the core network\nstack, loopback skb were not supposed to be received in hardware IRQ context.\nThe CAN stack is an exeption.\n\nThis bug was previously reported back in 2017 in [1] but the proposed patch\nnever got accepted.\n\nWhile [1] directly modifies net/core/dev.c, we try to propose here a\nsmoother modification local to CAN network stack (the assumption\nbehind is that only CAN devices are affected by this issue).\n\n[1] http://lore.kernel.org/r/57a3ffb6-3309-3ad5-5a34-e93c3fe3614d@cetitec.com"
        }
      ]
    }
  },
  "configurations": {
    "CVE_data_version": "4.0",
    "nodes": []
  },
  "impact": {},
  "publishedDate": "2025-04-17T18:15Z",
  "lastModifiedDate": "2025-04-17T20:21Z"
}