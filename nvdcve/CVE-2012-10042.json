{
  "cve": {
    "data_type": "CVE",
    "data_format": "MITRE",
    "data_version": "4.0",
    "CVE_data_meta": {
      "ID": "CVE-2012-10042",
      "ASSIGNER": "disclosure@vulncheck.com"
    },
    "problemtype": {
      "problemtype_data": [
        {
          "description": []
        }
      ]
    },
    "references": {
      "reference_data": [
        {
          "url": "https://raw.githubusercontent.com/rapid7/metasploit-framework/master/modules/exploits/multi/http/sflog_upload_exec.rb",
          "name": "https://raw.githubusercontent.com/rapid7/metasploit-framework/master/modules/exploits/multi/http/sflog_upload_exec.rb",
          "refsource": "",
          "tags": []
        },
        {
          "url": "https://sourceforge.net/projects/sflog/",
          "name": "https://sourceforge.net/projects/sflog/",
          "refsource": "",
          "tags": []
        },
        {
          "url": "https://www.exploit-db.com/exploits/19626",
          "name": "https://www.exploit-db.com/exploits/19626",
          "refsource": "",
          "tags": []
        },
        {
          "url": "https://www.vulncheck.com/advisories/sflog-cms-arbitrary-file-upload-rce",
          "name": "https://www.vulncheck.com/advisories/sflog-cms-arbitrary-file-upload-rce",
          "refsource": "",
          "tags": []
        },
        {
          "url": "https://www.exploit-db.com/exploits/19626",
          "name": "https://www.exploit-db.com/exploits/19626",
          "refsource": "",
          "tags": []
        },
        {
          "url": "https://raw.githubusercontent.com/rapid7/metasploit-framework/master/modules/exploits/multi/http/sflog_upload_exec.rb",
          "name": "https://raw.githubusercontent.com/rapid7/metasploit-framework/master/modules/exploits/multi/http/sflog_upload_exec.rb",
          "refsource": "",
          "tags": []
        }
      ]
    },
    "description": {
      "description_data": [
        {
          "lang": "en",
          "value": "Sflog! CMS 1.0 contains an authenticated arbitrary file upload vulnerability in the blog management interface. The application ships with default credentials (admin:secret) and allows authenticated users to upload files via manage.php. The upload mechanism fails to validate file types, enabling attackers to upload a PHP backdoor into a web-accessible directory (blogs/download/uploads/). Once uploaded, the file can be executed remotely, resulting in full remote code execution."
        }
      ]
    }
  },
  "configurations": {
    "CVE_data_version": "4.0",
    "nodes": []
  },
  "impact": {},
  "publishedDate": "2025-08-08T19:15Z",
  "lastModifiedDate": "2025-08-08T19:15Z"
}