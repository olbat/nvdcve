{
  "cve": {
    "data_type": "CVE",
    "data_format": "MITRE",
    "data_version": "4.0",
    "CVE_data_meta": {
      "ID": "CVE-2021-46975",
      "ASSIGNER": ""
    },
    "problemtype": {
      "problemtype_data": [
        {
          "description": [

          ]
        }
      ]
    },
    "references": {
      "reference_data": [
        {
          "url": "https://git.kernel.org/stable/c/da50f56e826e1db141693297afb99370ebc160dd",
          "name": "https://git.kernel.org/stable/c/da50f56e826e1db141693297afb99370ebc160dd",
          "refsource": "",
          "tags": [

          ]
        },
        {
          "url": "https://git.kernel.org/stable/c/68122479c128a929f8f7bdd951cfdc8dd0e75b8f",
          "name": "https://git.kernel.org/stable/c/68122479c128a929f8f7bdd951cfdc8dd0e75b8f",
          "refsource": "",
          "tags": [

          ]
        },
        {
          "url": "https://git.kernel.org/stable/c/9b288479f7a901a14ce703938596438559d7df55",
          "name": "https://git.kernel.org/stable/c/9b288479f7a901a14ce703938596438559d7df55",
          "refsource": "",
          "tags": [

          ]
        },
        {
          "url": "https://git.kernel.org/stable/c/baea536cf51f8180ab993e374cb134b5edad25e2",
          "name": "https://git.kernel.org/stable/c/baea536cf51f8180ab993e374cb134b5edad25e2",
          "refsource": "",
          "tags": [

          ]
        },
        {
          "url": "https://git.kernel.org/stable/c/d3598eb3915cc0c0d8cab42f4a6258ff44c4033e",
          "name": "https://git.kernel.org/stable/c/d3598eb3915cc0c0d8cab42f4a6258ff44c4033e",
          "refsource": "",
          "tags": [

          ]
        },
        {
          "url": "https://git.kernel.org/stable/c/fbf85a34ce17c4cf0a37ee253f4c582bbfb8231b",
          "name": "https://git.kernel.org/stable/c/fbf85a34ce17c4cf0a37ee253f4c582bbfb8231b",
          "refsource": "",
          "tags": [

          ]
        },
        {
          "url": "https://git.kernel.org/stable/c/671c54ea8c7ff47bd88444f3fffb65bf9799ce43",
          "name": "https://git.kernel.org/stable/c/671c54ea8c7ff47bd88444f3fffb65bf9799ce43",
          "refsource": "",
          "tags": [

          ]
        },
        {
          "url": "https://git.kernel.org/stable/c/2671fa4dc0109d3fb581bc3078fdf17b5d9080f6",
          "name": "https://git.kernel.org/stable/c/2671fa4dc0109d3fb581bc3078fdf17b5d9080f6",
          "refsource": "",
          "tags": [

          ]
        }
      ]
    },
    "description": {
      "description_data": [
        {
          "lang": "en",
          "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nnetfilter: conntrack: Make global sysctls readonly in non-init netns\n\nThese sysctls point to global variables:\n- NF_SYSCTL_CT_MAX (&nf_conntrack_max)\n- NF_SYSCTL_CT_EXPECT_MAX (&nf_ct_expect_max)\n- NF_SYSCTL_CT_BUCKETS (&nf_conntrack_htable_size_user)\n\nBecause their data pointers are not updated to point to per-netns\nstructures, they must be marked read-only in a non-init_net ns.\nOtherwise, changes in any net namespace are reflected in (leaked into)\nall other net namespaces. This problem has existed since the\nintroduction of net namespaces.\n\nThe current logic marks them read-only only if the net namespace is\nowned by an unprivileged user (other than init_user_ns).\n\nCommit d0febd81ae77 (\"netfilter: conntrack: re-visit sysctls in\nunprivileged namespaces\") \"exposes all sysctls even if the namespace is\nunpriviliged.\" Since we need to mark them readonly in any case, we can\nforego the unprivileged user check altogether."
        }
      ]
    }
  },
  "configurations": {
    "CVE_data_version": "4.0",
    "nodes": [

    ]
  },
  "impact": {
  },
  "publishedDate": "2024-02-27T19:04Z",
  "lastModifiedDate": "2024-02-28T14:06Z"
}