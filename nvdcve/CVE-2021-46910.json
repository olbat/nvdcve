{
  "id": "CVE-2021-46910",
  "sourceIdentifier": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
  "published": "2024-02-27T07:15:07.307",
  "lastModified": "2024-11-21T06:34:54.770",
  "vulnStatus": "Modified",
  "cveTags": [],
  "descriptions": [
    {
      "lang": "en",
      "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nARM: 9063/1: mm: reduce maximum number of CPUs if DEBUG_KMAP_LOCAL is enabled\n\nThe debugging code for kmap_local() doubles the number of per-CPU fixmap\nslots allocated for kmap_local(), in order to use half of them as guard\nregions. This causes the fixmap region to grow downwards beyond the start\nof its reserved window if the supported number of CPUs is large, and collide\nwith the newly added virtual DT mapping right below it, which is obviously\nnot good.\n\nOne manifestation of this is EFI boot on a kernel built with NR_CPUS=32\nand CONFIG_DEBUG_KMAP_LOCAL=y, which may pass the FDT in highmem, resulting\nin block entries below the fixmap region that the fixmap code misidentifies\nas fixmap table entries, and subsequently tries to dereference using a\nphys-to-virt translation that is only valid for lowmem. This results in a\ncryptic splat such as the one below.\n\n  ftrace: allocating 45548 entries in 89 pages\n  8<--- cut here ---\n  Unable to handle kernel paging request at virtual address fc6006f0\n  pgd = (ptrval)\n  [fc6006f0] *pgd=80000040207003, *pmd=00000000\n  Internal error: Oops: a06 [#1] SMP ARM\n  Modules linked in:\n  CPU: 0 PID: 0 Comm: swapper Not tainted 5.11.0+ #382\n  Hardware name: Generic DT based system\n  PC is at cpu_ca15_set_pte_ext+0x24/0x30\n  LR is at __set_fixmap+0xe4/0x118\n  pc : [<c041ac9c>]    lr : [<c04189d8>]    psr: 400000d3\n  sp : c1601ed8  ip : 00400000  fp : 00800000\n  r10: 0000071f  r9 : 00421000  r8 : 00c00000\n  r7 : 00c00000  r6 : 0000071f  r5 : ffade000  r4 : 4040171f\n  r3 : 00c00000  r2 : 4040171f  r1 : c041ac78  r0 : fc6006f0\n  Flags: nZcv  IRQs off  FIQs off  Mode SVC_32  ISA ARM  Segment none\n  Control: 30c5387d  Table: 40203000  DAC: 00000001\n  Process swapper (pid: 0, stack limit = 0x(ptrval))\n\nSo let's limit CONFIG_NR_CPUS to 16 when CONFIG_DEBUG_KMAP_LOCAL=y. Also,\nfix the BUILD_BUG_ON() check that was supposed to catch this, by checking\nwhether the region grows below the start address rather than above the end\naddress."
    },
    {
      "lang": "es",
      "value": "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: ARM: 9063/1: mm: reduce el número máximo de CPU si DEBUG_KMAP_LOCAL está habilitado El código de depuración para kmap_local() duplica el número de ranuras de mapas de reparación por CPU asignadas para kmap_local() , para utilizar la mitad de ellos como regiones de guardia. Esto hace que la región del mapa de arreglos crezca hacia abajo más allá del inicio de su ventana reservada si la cantidad de CPU admitidas es grande, y colisiona con el mapeo de DT virtual recién agregado justo debajo, lo cual obviamente no es bueno. Una manifestación de esto es el arranque EFI en un kernel creado con NR_CPUS=32 y CONFIG_DEBUG_KMAP_LOCAL=y, que puede pasar la FDT en highmem, lo que genera entradas de bloque debajo de la región de fixmap que el código de fixmap identifica erróneamente como entradas de la tabla de fixmap y, posteriormente, intenta desreferencia usando una traducción de phys a virt que solo es válida para lowmem. Esto da como resultado un símbolo críptico como el que se muestra a continuación. ftrace: asignando 45548 entradas en 89 páginas 8&lt;--- cortar aquí --- No se puede manejar la solicitud de paginación del kernel en la dirección virtual fc6006f0 pgd = (ptrval) [fc6006f0] *pgd=80000040207003, *pmd=00000000 Error interno: Ups: a06 [#1] Módulos SMP ARM vinculados en: CPU: 0 PID: 0 Comm: swapper Not tainted 5.11.0+ #382 Nombre del hardware: Sistema genérico basado en DT La PC está en cpu_ca15_set_pte_ext+0x24/0x30 LR está en __set_fixmap+0xe4/ 0x118 pc: [] lr: [] psr: 400000d3 sp: c1601ed8 ip: 00400000 fp: 00800000 r10: 0000071f r9: 00421000 r8: 00c00000 r7: 00c00000 r6: 0000071f r5: ffade000 r4: 4040171f r3: 00c00000 r2: 4040171f r1: c041ac78 r0: fc6006f0 Banderas: nZcv IRQ desactivadas FIQ desactivadas Modo SVC_32 ISA ARM Segmento ninguno Control: 30c5387d Tabla: 40203000 DAC: 00000001 Intercambiador de procesos (pid: 0, límite de pila = 0x(ptr) val)) Así que limitemos CONFIG_NR_CPUS a 16 cuando CONFIG_DEBUG_KMAP_LOCAL=y. Además, corrija la verificación BUILD_BUG_ON() que se suponía detectaría esto, verificando si la región crece por debajo de la dirección inicial en lugar de por encima de la dirección final."
    }
  ],
  "metrics": {
    "cvssMetricV31": [
      {
        "source": "nvd@nist.gov",
        "type": "Primary",
        "cvssData": {
          "version": "3.1",
          "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
          "baseScore": 5.5,
          "baseSeverity": "MEDIUM",
          "attackVector": "LOCAL",
          "attackComplexity": "LOW",
          "privilegesRequired": "LOW",
          "userInteraction": "NONE",
          "scope": "UNCHANGED",
          "confidentialityImpact": "NONE",
          "integrityImpact": "NONE",
          "availabilityImpact": "HIGH"
        },
        "exploitabilityScore": 1.8,
        "impactScore": 3.6
      }
    ]
  },
  "weaknesses": [
    {
      "source": "nvd@nist.gov",
      "type": "Primary",
      "description": [
        {
          "lang": "en",
          "value": "NVD-CWE-noinfo"
        }
      ]
    }
  ],
  "configurations": [
    {
      "nodes": [
        {
          "operator": "OR",
          "negate": false,
          "cpeMatch": [
            {
              "vulnerable": true,
              "criteria": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*",
              "versionStartIncluding": "5.11.0",
              "versionEndExcluding": "5.11.16",
              "matchCriteriaId": "3C5242B9-B5BD-4578-AD66-69DF59D54A14"
            }
          ]
        }
      ]
    }
  ],
  "references": [
    {
      "url": "https://git.kernel.org/stable/c/5965ac11b1d5fcb38464728931649cd9df79c7c9",
      "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://git.kernel.org/stable/c/d624833f5984d484c5e3196f34b926f9e71dafee",
      "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://git.kernel.org/stable/c/5965ac11b1d5fcb38464728931649cd9df79c7c9",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://git.kernel.org/stable/c/d624833f5984d484c5e3196f34b926f9e71dafee",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    }
  ]
}