{
  "id": "CVE-2024-42293",
  "sourceIdentifier": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
  "published": "2024-08-17T09:15:09.867",
  "lastModified": "2024-08-19T12:59:59.177",
  "vulnStatus": "Undergoing Analysis",
  "cveTags": [],
  "descriptions": [
    {
      "lang": "en",
      "value": "In the Linux kernel, the following vulnerability has been resolved:\n\narm64: mm: Fix lockless walks with static and dynamic page-table folding\n\nLina reports random oopsen originating from the fast GUP code when\n16K pages are used with 4-level page-tables, the fourth level being\nfolded at runtime due to lack of LPA2.\n\nIn this configuration, the generic implementation of\np4d_offset_lockless() will return a 'p4d_t *' corresponding to the\n'pgd_t' allocated on the stack of the caller, gup_fast_pgd_range().\nThis is normally fine, but when the fourth level of page-table is folded\nat runtime, pud_offset_lockless() will offset from the address of the\n'p4d_t' to calculate the address of the PUD in the same page-table page.\nThis results in a stray stack read when the 'p4d_t' has been allocated\non the stack and can send the walker into the weeds.\n\nFix the problem by providing our own definition of p4d_offset_lockless()\nwhen CONFIG_PGTABLE_LEVELS <= 4 which returns the real page-table\npointer rather than the address of the local stack variable."
    },
    {
      "lang": "es",
      "value": "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: arm64: mm: corrige recorridos sin bloqueo con plegado de tablas de páginas estáticas y dinámicas. Lina informa oopsen aleatorios que se originan en el código GUP rápido cuando se utilizan páginas de 16 KB con tablas de páginas de 4 niveles. el cuarto nivel se pliega en tiempo de ejecución debido a la falta de LPA2. En esta configuración, la implementación genérica de p4d_offset_lockless() devolverá un 'p4d_t *' correspondiente al 'pgd_t' asignado en la pila de la persona que llama, gup_fast_pgd_range(). Esto normalmente está bien, pero cuando el cuarto nivel de la tabla de páginas se pliega en tiempo de ejecución, pud_offset_lockless() se desplazará de la dirección de 'p4d_t' para calcular la dirección del PUD en la misma página de la tabla de páginas. Esto da como resultado una lectura de pila perdida cuando el 'p4d_t' se ha asignado en la pila y puede enviar al caminante hacia la maleza. Solucione el problema proporcionando nuestra propia definición de p4d_offset_lockless() cuando CONFIG_PGTABLE_LEVELS &lt;= 4, que devuelve el puntero de la tabla de páginas real en lugar de la dirección de la variable de pila local."
    }
  ],
  "metrics": {},
  "references": [
    {
      "url": "https://git.kernel.org/stable/c/36639013b3462c06ff8e3400a427f775b4fc97f5",
      "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"
    },
    {
      "url": "https://git.kernel.org/stable/c/78672d49d3eebbcda3589f4d6e589caf357c5a59",
      "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"
    }
  ]
}