{
  "cve": {
    "data_type": "CVE",
    "data_format": "MITRE",
    "data_version": "4.0",
    "CVE_data_meta": {
      "ID": "CVE-2022-49837",
      "ASSIGNER": "cve@kernel.org"
    },
    "problemtype": {
      "problemtype_data": [
        {
          "description": []
        }
      ]
    },
    "references": {
      "reference_data": [
        {
          "url": "https://git.kernel.org/stable/c/83946d772e756734a900ef99dbe0aeda506adf37",
          "name": "https://git.kernel.org/stable/c/83946d772e756734a900ef99dbe0aeda506adf37",
          "refsource": "",
          "tags": []
        },
        {
          "url": "https://git.kernel.org/stable/c/d4944497827a3d14bc5a26dbcfb7433eb5a956c0",
          "name": "https://git.kernel.org/stable/c/d4944497827a3d14bc5a26dbcfb7433eb5a956c0",
          "refsource": "",
          "tags": []
        },
        {
          "url": "https://git.kernel.org/stable/c/eb86559a691cea5fa63e57a03ec3dc9c31e97955",
          "name": "https://git.kernel.org/stable/c/eb86559a691cea5fa63e57a03ec3dc9c31e97955",
          "refsource": "",
          "tags": []
        }
      ]
    },
    "description": {
      "description_data": [
        {
          "lang": "en",
          "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nbpf: Fix memory leaks in __check_func_call\n\nkmemleak reports this issue:\n\nunreferenced object 0xffff88817139d000 (size 2048):\n  comm \"test_progs\", pid 33246, jiffies 4307381979 (age 45851.820s)\n  hex dump (first 32 bytes):\n    01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n  backtrace:\n    [<0000000045f075f0>] kmalloc_trace+0x27/0xa0\n    [<0000000098b7c90a>] __check_func_call+0x316/0x1230\n    [<00000000b4c3c403>] check_helper_call+0x172e/0x4700\n    [<00000000aa3875b7>] do_check+0x21d8/0x45e0\n    [<000000001147357b>] do_check_common+0x767/0xaf0\n    [<00000000b5a595b4>] bpf_check+0x43e3/0x5bc0\n    [<0000000011e391b1>] bpf_prog_load+0xf26/0x1940\n    [<0000000007f765c0>] __sys_bpf+0xd2c/0x3650\n    [<00000000839815d6>] __x64_sys_bpf+0x75/0xc0\n    [<00000000946ee250>] do_syscall_64+0x3b/0x90\n    [<0000000000506b7f>] entry_SYSCALL_64_after_hwframe+0x63/0xcd\n\nThe root case here is: In function prepare_func_exit(), the callee is\nnot released in the abnormal scenario after \"state->curframe--;\". To\nfix, move \"state->curframe--;\" to the very bottom of the function,\nright when we free callee and reset frame[] pointer to NULL, as Andrii\nsuggested.\n\nIn addition, function __check_func_call() has a similar problem. In\nthe abnormal scenario before \"state->curframe++;\", the callee also\nshould be released by free_func_state()."
        }
      ]
    }
  },
  "configurations": {
    "CVE_data_version": "4.0",
    "nodes": []
  },
  "impact": {},
  "publishedDate": "2025-05-01T15:16Z",
  "lastModifiedDate": "2025-05-01T15:16Z"
}