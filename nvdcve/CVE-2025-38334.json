{
  "id": "CVE-2025-38334",
  "sourceIdentifier": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
  "published": "2025-07-10T09:15:27.960",
  "lastModified": "2025-07-10T13:17:30.017",
  "vulnStatus": "Awaiting Analysis",
  "cveTags": [],
  "descriptions": [
    {
      "lang": "en",
      "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nx86/sgx: Prevent attempts to reclaim poisoned pages\n\nTL;DR: SGX page reclaim touches the page to copy its contents to\nsecondary storage. SGX instructions do not gracefully handle machine\nchecks. Despite this, the existing SGX code will try to reclaim pages\nthat it _knows_ are poisoned. Avoid even trying to reclaim poisoned pages.\n\nThe longer story:\n\nPages used by an enclave only get epc_page->poison set in\narch_memory_failure() but they currently stay on sgx_active_page_list until\nsgx_encl_release(), with the SGX_EPC_PAGE_RECLAIMER_TRACKED flag untouched.\n\nepc_page->poison is not checked in the reclaimer logic meaning that, if other\nconditions are met, an attempt will be made to reclaim an EPC page that was\npoisoned.  This is bad because 1. we don't want that page to end up added\nto another enclave and 2. it is likely to cause one core to shut down\nand the kernel to panic.\n\nSpecifically, reclaiming uses microcode operations including \"EWB\" which\naccesses the EPC page contents to encrypt and write them out to non-SGX\nmemory.  Those operations cannot handle MCEs in their accesses other than\nby putting the executing core into a special shutdown state (affecting\nboth threads with HT.)  The kernel will subsequently panic on the\nremaining cores seeing the core didn't enter MCE handler(s) in time.\n\nCall sgx_unmark_page_reclaimable() to remove the affected EPC page from\nsgx_active_page_list on memory error to stop it being considered for\nreclaiming.\n\nTesting epc_page->poison in sgx_reclaim_pages() would also work but I assume\nit's better to add code in the less likely paths.\n\nThe affected EPC page is not added to &node->sgx_poison_page_list until\nlater in sgx_encl_release()->sgx_free_epc_page() when it is EREMOVEd.\nMembership on other lists doesn't change to avoid changing any of the\nlists' semantics except for sgx_active_page_list.  There's a \"TBD\" comment\nin arch_memory_failure() about pre-emptive actions, the goal here is not\nto address everything that it may imply.\n\nThis also doesn't completely close the time window when a memory error\nnotification will be fatal (for a not previously poisoned EPC page) --\nthe MCE can happen after sgx_reclaim_pages() has selected its candidates\nor even *inside* a microcode operation (actually easy to trigger due to\nthe amount of time spent in them.)\n\nThe spinlock in sgx_unmark_page_reclaimable() is safe because\nmemory_failure() runs in process context and no spinlocks are held,\nexplicitly noted in a mm/memory-failure.c comment."
    },
    {
      "lang": "es",
      "value": "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: x86/sgx: Evitar intentos de recuperar páginas envenenadas TL;DR: La recuperación de página SGX toca la página para copiar su contenido al almacenamiento secundario. Las instrucciones SGX no manejan correctamente las comprobaciones de la máquina. A pesar de esto, el código SGX existente intentará recuperar las páginas que _sabe_ que están envenenadas. Evite incluso intentar recuperar páginas envenenadas. En resumen: Las páginas utilizadas por un enclave solo obtienen epc_page-&gt;poison establecida en arch_memory_failure(), pero actualmente permanecen en sgx_active_page_list hasta sgx_encl_release(), con el indicador SGX_EPC_PAGE_RECLAIMER_TRACKED intacto. epc_page-&gt;poison no se comprueba en la lógica del recuperador, lo que significa que, si se cumplen otras condiciones, se intentará recuperar una página EPC que fue envenenada. Esto es perjudicial porque 1. no queremos que esa página se añada a otro enclave y 2. es probable que provoque el apagado de un núcleo y el pánico del kernel. En concreto, la recuperación utiliza operaciones de microcódigo, como \"EWB\", que accede al contenido de la página EPC para cifrarlo y escribirlo en memoria no SGX. Estas operaciones no pueden gestionar MCE en sus accesos, salvo que pongan el núcleo en ejecución en un estado de apagado especial (lo que afecta a ambos hilos con HT). El kernel posteriormente entrará en pánico en los núcleos restantes, al ver que el núcleo no accedió a los controladores de MCE a tiempo. Llama a sgx_unmark_page_reclaimable() para eliminar la página EPC afectada de sgx_active_page_list en caso de error de memoria y así evitar que se considere su recuperación. Probar epc_page-&gt;poison en sgx_reclaim_pages() también funcionaría, pero supongo que es mejor añadir código en las rutas menos probables. La página EPC afectada no se añade a &amp;node-&gt;sgx_poison_page_list hasta más adelante en sgx_encl_release()-&gt;sgx_free_epc_page(), cuando se elimina. La membresía en otras listas no cambia para evitar modificar la semántica de las listas, excepto la de sgx_active_page_list. Hay un comentario \"TBD\" en arch_memory_failure() sobre acciones preventivas; el objetivo no es abordar todo lo que pueda implicar. Esto tampoco cierra completamente la ventana de tiempo cuando una notificación de error de memoria será fatal (para una página EPC que no haya sido envenenada previamente) - el MCE puede ocurrir después de que sgx_reclaim_pages() haya seleccionado sus candidatos o incluso *dentro* de una operación de microcódigo (en realidad, fácil de activar debido a la cantidad de tiempo empleado en ellas). El bloqueo de giro en sgx_unmark_page_reclaimable() es seguro porque memory_failure() se ejecuta en el contexto del proceso y no se mantienen bloqueos de giro, lo que se señala explícitamente en un comentario mm/memory-failure.c."
    }
  ],
  "metrics": {},
  "references": [
    {
      "url": "https://git.kernel.org/stable/c/00a88e9ea1b170d579c56327c38f7e8cf689df87",
      "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"
    },
    {
      "url": "https://git.kernel.org/stable/c/31dcbac94bfeabb86bf85b0c36803fdd6536437b",
      "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"
    },
    {
      "url": "https://git.kernel.org/stable/c/62b62a2a6dc51ed6e8e334861f04220c9cf8106a",
      "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"
    },
    {
      "url": "https://git.kernel.org/stable/c/dc5de5bd6deabd327ced2b2b1d0b4f14cd146afe",
      "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"
    },
    {
      "url": "https://git.kernel.org/stable/c/ed16618c380c32c68c06186d0ccbb0d5e0586e59",
      "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"
    }
  ]
}