{
  "id": "CVE-2022-48797",
  "sourceIdentifier": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
  "published": "2024-07-16T12:15:04.360",
  "lastModified": "2024-11-21T07:34:02.710",
  "vulnStatus": "Awaiting Analysis",
  "cveTags": [

  ],
  "descriptions": [
    {
      "lang": "en",
      "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nmm: don't try to NUMA-migrate COW pages that have other uses\n\nOded Gabbay reports that enabling NUMA balancing causes corruption with\nhis Gaudi accelerator test load:\n\n \"All the details are in the bug, but the bottom line is that somehow,\n  this patch causes corruption when the numa balancing feature is\n  enabled AND we don't use process affinity AND we use GUP to pin pages\n  so our accelerator can DMA to/from system memory.\n\n  Either disabling numa balancing, using process affinity to bind to\n  specific numa-node or reverting this patch causes the bug to\n  disappear\"\n\nand Oded bisected the issue to commit 09854ba94c6a (\"mm: do_wp_page()\nsimplification\").\n\nNow, the NUMA balancing shouldn't actually be changing the writability\nof a page, and as such shouldn't matter for COW.  But it appears it\ndoes.  Suspicious.\n\nHowever, regardless of that, the condition for enabling NUMA faults in\nchange_pte_range() is nonsensical.  It uses \"page_mapcount(page)\" to\ndecide if a COW page should be NUMA-protected or not, and that makes\nabsolutely no sense.\n\nThe number of mappings a page has is irrelevant: not only does GUP get a\nreference to a page as in Oded's case, but the other mappings migth be\npaged out and the only reference to them would be in the page count.\n\nSince we should never try to NUMA-balance a page that we can't move\nanyway due to other references, just fix the code to use 'page_count()'.\nOded confirms that that fixes his issue.\n\nNow, this does imply that something in NUMA balancing ends up changing\npage protections (other than the obvious one of making the page\ninaccessible to get the NUMA faulting information).  Otherwise the COW\nsimplification wouldn't matter - since doing the GUP on the page would\nmake sure it's writable.\n\nThe cause of that permission change would be good to figure out too,\nsince it clearly results in spurious COW events - but fixing the\nnonsensical test that just happened to work before is obviously the\nCorrectThing(tm) to do regardless."
    },
    {
      "lang": "es",
      "value": "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: mm: no intente migrar páginas COW con NUMA que tengan otros usos Oded Gabbay informa que habilitar el equilibrio de NUMA causa corrupción en la carga de prueba del acelerador Gaudí: \"Todos los detalles están en el error, pero la conclusión es que de alguna manera, este parche causa corrupción cuando la función de equilibrio numa está habilitada Y no usamos la afinidad de procesos Y usamos GUP para anclar páginas para que nuestro acelerador pueda DMA hacia/desde la memoria del sistema, ya sea deshabilitando. El equilibrio de numa, el uso de la afinidad del proceso para vincularse a un nodo numa específico o revertir este parche hace que el error desaparezca\" y Oded dividió el problema en dos para el commit 09854ba94c6a (\"mm: simplificación de do_wp_page()\"). Ahora bien, el equilibrio NUMA en realidad no debería cambiar la capacidad de escritura de una página y, como tal, no debería importarle a COW. Pero parece que sí. Sospechoso. Sin embargo, independientemente de eso, la condición para habilitar fallas NUMA en change_pte_range() no tiene sentido. Utiliza \"page_mapcount(page)\" para decidir si una página COW debe estar protegida por NUMA o no, y eso no tiene ningún sentido. El número de asignaciones que tiene una página es irrelevante: GUP no solo obtiene una referencia a una página como en el caso de Oded, sino que las otras asignaciones podrían eliminarse y la única referencia a ellas estaría en el recuento de páginas. Dado que nunca debemos intentar equilibrar NUMA una página que no podemos mover de todos modos debido a otras referencias, simplemente corrija el código para usar 'page_count()'. Oded confirma que eso soluciona su problema. Ahora bien, esto implica que algo en el equilibrio de NUMA termina cambiando las protecciones de la página (aparte de la obvia de hacer que la página sea inaccesible para obtener la información de fallas de NUMA). De lo contrario, la simplificación de COW no importaría, ya que hacer el GUP en la página garantizaría que se pueda escribir. También sería bueno descubrir la causa de ese cambio de permiso, ya que claramente da como resultado eventos COW falsos, pero arreglar la prueba sin sentido que funcionó antes es obviamente lo CorrectThing(tm) que se debe hacer de todos modos."
    }
  ],
  "metrics": {
  },
  "references": [
    {
      "url": "https://git.kernel.org/stable/c/254090925e16abd914c87b4ad1b489440d89c4c3",
      "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"
    },
    {
      "url": "https://git.kernel.org/stable/c/80d47f5de5e311cbc0d01ebb6ee684e8f4c196c6",
      "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"
    },
    {
      "url": "https://git.kernel.org/stable/c/b3dc4b9d3ca68b370c4aeab5355007eedf948849",
      "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"
    },
    {
      "url": "https://git.kernel.org/stable/c/d187eeb02d18446e5e54ed6bcbf8b47e6551daea",
      "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"
    },
    {
      "url": "https://git.kernel.org/stable/c/254090925e16abd914c87b4ad1b489440d89c4c3",
      "source": "af854a3a-2127-422b-91ae-364da2661108"
    },
    {
      "url": "https://git.kernel.org/stable/c/80d47f5de5e311cbc0d01ebb6ee684e8f4c196c6",
      "source": "af854a3a-2127-422b-91ae-364da2661108"
    },
    {
      "url": "https://git.kernel.org/stable/c/b3dc4b9d3ca68b370c4aeab5355007eedf948849",
      "source": "af854a3a-2127-422b-91ae-364da2661108"
    },
    {
      "url": "https://git.kernel.org/stable/c/d187eeb02d18446e5e54ed6bcbf8b47e6551daea",
      "source": "af854a3a-2127-422b-91ae-364da2661108"
    }
  ]
}