{
  "id": "CVE-2024-57876",
  "sourceIdentifier": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
  "published": "2025-01-11T15:15:07.930",
  "lastModified": "2025-01-11T15:15:07.930",
  "vulnStatus": "Awaiting Analysis",
  "cveTags": [],
  "descriptions": [
    {
      "lang": "en",
      "value": "In the Linux kernel, the following vulnerability has been resolved:\n\ndrm/dp_mst: Fix resetting msg rx state after topology removal\n\nIf the MST topology is removed during the reception of an MST down reply\nor MST up request sideband message, the\ndrm_dp_mst_topology_mgr::up_req_recv/down_rep_recv states could be reset\nfrom one thread via drm_dp_mst_topology_mgr_set_mst(false), racing with\nthe reading/parsing of the message from another thread via\ndrm_dp_mst_handle_down_rep() or drm_dp_mst_handle_up_req(). The race is\npossible since the reader/parser doesn't hold any lock while accessing\nthe reception state. This in turn can lead to a memory corruption in the\nreader/parser as described by commit bd2fccac61b4 (\"drm/dp_mst: Fix MST\nsideband message body length check\").\n\nFix the above by resetting the message reception state if needed before\nreading/parsing a message. Another solution would be to hold the\ndrm_dp_mst_topology_mgr::lock for the whole duration of the message\nreception/parsing in drm_dp_mst_handle_down_rep() and\ndrm_dp_mst_handle_up_req(), however this would require a bigger change.\nSince the fix is also needed for stable, opting for the simpler solution\nin this patch."
    },
    {
      "lang": "es",
      "value": "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: drm/dp_mst: Se soluciona el restablecimiento del estado de recepción del mensaje después de la eliminación de la topología Si se elimina la topología MST durante la recepción de un mensaje de banda lateral de respuesta de baja de MST o de solicitud de subida de MST, los estados drm_dp_mst_topology_mgr::up_req_recv/down_rep_recv podrían restablecerse desde un hilo mediante drm_dp_mst_topology_mgr_set_mst(false), compitiendo con la lectura/análisis del mensaje desde otro hilo mediante drm_dp_mst_handle_down_rep() o drm_dp_mst_handle_up_req(). La competencia es posible ya que el lector/analizador no mantiene ningún bloqueo mientras accede al estado de recepción. Esto, a su vez, puede provocar una corrupción de memoria en el lector/analizador, como se describe en el commit bd2fccac61b4 (\"drm/dp_mst: Fix MST sideband message body length check\"). Corrija lo anterior restableciendo el estado de recepción del mensaje si es necesario antes de leer/analizar un mensaje. Otra solución sería mantener el bloqueo drm_dp_mst_topology_mgr::lock durante toda la duración de la recepción/análisis del mensaje en drm_dp_mst_handle_down_rep() y drm_dp_mst_handle_up_req(), sin embargo, esto requeriría un cambio mayor. Dado que la corrección también es necesaria para la versión estable, se opta por la solución más simple en este parche."
    }
  ],
  "metrics": {},
  "references": [
    {
      "url": "https://git.kernel.org/stable/c/94b33b2d7640e807869451384eb88321dd0ffbd4",
      "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"
    },
    {
      "url": "https://git.kernel.org/stable/c/a6fa67d26de385c3c7a23c1e109a0e23bfda4ec7",
      "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"
    },
    {
      "url": "https://git.kernel.org/stable/c/be826b4451fd187a7c0b04be4f8243d5df6e0450",
      "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"
    },
    {
      "url": "https://git.kernel.org/stable/c/d834d20d2e86c52ed5cab41763fa61e6071680ef",
      "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"
    }
  ]
}