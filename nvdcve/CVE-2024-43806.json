{
  "id": "CVE-2024-43806",
  "sourceIdentifier": "security-advisories@github.com",
  "published": "2024-08-26T19:15:08.190",
  "lastModified": "2024-08-27T13:02:05.683",
  "vulnStatus": "Awaiting Analysis",
  "cveTags": [

  ],
  "descriptions": [
    {
      "lang": "en",
      "value": "Rustix is a set of safe Rust bindings to POSIX-ish APIs. When using `rustix::fs::Dir` using the `linux_raw` backend, it's possible for the iterator to \"get stuck\" when an IO error is encountered. Combined with a memory over-allocation issue in `rustix::fs::Dir::read_more`, this can cause quick and unbounded memory explosion (gigabytes in a few seconds if used on a hot path) and eventually lead to an OOM crash of the application. The symptoms were initially discovered in https://github.com/imsnif/bandwhich/issues/284. That post has lots of details of our investigation. Full details can be read on the GHSA-c827-hfw6-qwvm repo advisory. If a program tries to access a directory with its file descriptor after the file has been unlinked (or any other action that leaves the `Dir` iterator in the stuck state), and the implementation does not break after seeing an error, it can cause a memory explosion. As an example, Linux's various virtual file systems (e.g. `/proc`, `/sys`) can contain directories that spontaneously pop in and out of existence. Attempting to iterate over them using `rustix::fs::Dir` directly or indirectly (e.g. with the `procfs` crate) can trigger this fault condition if the implementation decides to continue on errors. An attacker knowledgeable about the implementation details of a vulnerable target can therefore try to trigger this fault condition via any one or a combination of several available APIs. If successful, the application host will quickly run out of memory, after which the application will likely be terminated by an OOM killer, leading to denial of service. This issue has been addressed in release versions 0.35.15, 0.36.16, 0.37.25, and 0.38.19. Users are advised to upgrade. There are no known workarounds for this issue."
    },
    {
      "lang": "es",
      "value": "Rustix es un conjunto de enlaces seguros de Rust para API tipo POSIX. Cuando se usa `rustix::fs::Dir` usando el backend `linux_raw`, es posible que el iterador se \"quede atascado\" cuando se encuentra un error de IO. Combinado con un problema de sobreasignación de memoria en `rustix::fs::Dir::read_more`, esto puede causar una explosión de memoria rápida e ilimitada (gigabytes en unos pocos segundos si se usa en una ruta activa) y eventualmente provocar un bloqueo de OOM. de la aplicación. Los síntomas se descubrieron inicialmente en https://github.com/imsnif/band Which/issues/284. Esa publicación tiene muchos detalles de nuestra investigación. Se pueden leer todos los detalles en el aviso de repositorio GHSA-c827-hfw6-qwvm. Si un programa intenta acceder a un directorio con su descriptor de archivo después de que el archivo se ha desvinculado (o cualquier otra acción que deje el iterador `Dir` en estado bloqueado), y la implementación no se interrumpe después de ver un error, puede causar una explosión de memoria. Como ejemplo, los diversos sistemas de archivos virtuales de Linux (por ejemplo, `/proc`, `/sys`) pueden contener directorios que aparecen y desaparecen espontáneamente. Intentar iterar sobre ellos usando `rustix::fs::Dir` directa o indirectamente (por ejemplo, con la caja `procfs`) puede desencadenar esta condición de falla si la implementación decide continuar con los errores. Por lo tanto, un atacante que conozca los detalles de implementación de un objetivo vulnerable puede intentar desencadenar esta condición de error a través de cualquiera o una combinación de varias API disponibles. Si tiene éxito, el host de la aplicación se quedará rápidamente sin memoria, después de lo cual es probable que un asesino OOM finalice la aplicación, lo que provocará una denegación de servicio. Este problema se solucionó en las versiones 0.35.15, 0.36.16, 0.37.25 y 0.38.19. Se recomienda a los usuarios que actualicen. No se conocen workarounds para este problema."
    }
  ],
  "metrics": {
    "cvssMetricV31": [
      {
        "source": "security-advisories@github.com",
        "type": "Secondary",
        "cvssData": {
          "version": "3.1",
          "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
          "baseScore": 6.5,
          "baseSeverity": "MEDIUM",
          "attackVector": "NETWORK",
          "attackComplexity": "LOW",
          "privilegesRequired": "LOW",
          "userInteraction": "NONE",
          "scope": "UNCHANGED",
          "confidentialityImpact": "NONE",
          "integrityImpact": "NONE",
          "availabilityImpact": "HIGH"
        },
        "exploitabilityScore": 2.8,
        "impactScore": 3.6
      }
    ]
  },
  "weaknesses": [
    {
      "source": "security-advisories@github.com",
      "type": "Secondary",
      "description": [
        {
          "lang": "en",
          "value": "CWE-400"
        }
      ]
    }
  ],
  "references": [
    {
      "url": "https://github.com/bytecodealliance/rustix/security/advisories/GHSA-c827-hfw6-qwvm",
      "source": "security-advisories@github.com"
    },
    {
      "url": "https://github.com/imsnif/bandwhich/issues/284",
      "source": "security-advisories@github.com"
    }
  ]
}