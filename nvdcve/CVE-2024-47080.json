{
  "id": "CVE-2024-47080",
  "sourceIdentifier": "security-advisories@github.com",
  "published": "2024-10-15T15:15:12.653",
  "lastModified": "2024-10-16T16:38:43.170",
  "vulnStatus": "Awaiting Analysis",
  "cveTags": [

  ],
  "descriptions": [
    {
      "lang": "en",
      "value": "matrix-js-sdk is the Matrix Client-Server SDK for JavaScript and TypeScript. In matrix-js-sdk versions versions 9.11.0 through 34.7.0, the method `MatrixClient.sendSharedHistoryKeys` is vulnerable to interception by malicious homeservers.  The method was introduced by MSC3061) and is commonly used to share historical message keys with newly invited users, granting them access to past messages in the room. However, it unconditionally sends these \"shared\" keys to all of the invited user's devices, regardless of whether the user's cryptographic identity is verified or whether the user's devices are signed by that identity. This allows the attacker to potentially inject its own devices to receive sensitive historical keys without proper security checks. Note that this only affects clients running the SDK with the legacy crypto stack. Clients using the new Rust cryptography stack (i.e. those that call `MatrixClient.initRustCrypto()` instead of `MatrixClient.initCrypto()`) are unaffected by this vulnerability, because `MatrixClient.sendSharedHistoryKeys()` raises an exception in such environments. The vulnerability was fixed in matrix-js-sdk 34.8.0 by removing the vulnerable functionality. As a workaround, remove use of affected functionality from clients."
    },
    {
      "lang": "es",
      "value": "matrix-js-sdk es el SDK de Matrix Client-Server para JavaScript y TypeScript. En las versiones 9.11.0 a 34.7.0 de matrix-js-sdk, el método `MatrixClient.sendSharedHistoryKeys` es vulnerable a la intercepción por parte de servidores domésticos maliciosos. El método fue introducido por MSC3061) y se utiliza comúnmente para compartir claves de mensajes históricos con usuarios recién invitados, otorgándoles acceso a mensajes anteriores en la sala. Sin embargo, envía incondicionalmente estas claves \"compartidas\" a todos los dispositivos del usuario invitado, independientemente de si la identidad criptográfica del usuario está verificada o si los dispositivos del usuario están firmados por esa identidad. Esto permite al atacante inyectar potencialmente sus propios dispositivos para recibir claves históricas confidenciales sin los controles de seguridad adecuados. Tenga en cuenta que esto solo afecta a los clientes que ejecutan el SDK con la pila criptográfica heredada. Los clientes que utilizan la nueva pila de criptografía de Rust (es decir, aquellos que llaman a `MatrixClient.initRustCrypto()` en lugar de `MatrixClient.initCrypto()`) no se ven afectados por esta vulnerabilidad, porque `MatrixClient.sendSharedHistoryKeys()` genera una excepción en dichos entornos. La vulnerabilidad se solucionó en matrix-js-sdk 34.8.0 eliminando la funcionalidad vulnerable. Como workaround, elimine el uso de la funcionalidad afectada de los clientes."
    }
  ],
  "metrics": {
    "cvssMetricV40": [
      {
        "source": "security-advisories@github.com",
        "type": "Secondary",
        "cvssData": {
          "version": "4.0",
          "vectorString": "CVSS:4.0/AV:N/AC:L/AT:N/PR:N/UI:N/VC:H/VI:N/VA:N/SC:N/SI:N/SA:N/E:X/CR:X/IR:X/AR:X/MAV:X/MAC:X/MAT:X/MPR:X/MUI:X/MVC:X/MVI:X/MVA:X/MSC:X/MSI:X/MSA:X/S:X/AU:X/R:X/V:X/RE:X/U:X",
          "baseScore": 8.7,
          "baseSeverity": "HIGH",
          "attackVector": "NETWORK",
          "attackComplexity": "LOW",
          "attackRequirements": "NONE",
          "privilegesRequired": "NONE",
          "userInteraction": "NONE",
          "vulnConfidentialityImpact": "HIGH",
          "vulnIntegrityImpact": "NONE",
          "vulnAvailabilityImpact": "NONE",
          "subConfidentialityImpact": "NONE",
          "subIntegrityImpact": "NONE",
          "subAvailabilityImpact": "NONE",
          "exploitMaturity": "NOT_DEFINED",
          "confidentialityRequirement": "NOT_DEFINED",
          "integrityRequirement": "NOT_DEFINED",
          "availabilityRequirement": "NOT_DEFINED",
          "modifiedAttackVector": "NOT_DEFINED",
          "modifiedAttackComplexity": "NOT_DEFINED",
          "modifiedAttackRequirements": "NOT_DEFINED",
          "modifiedPrivilegesRequired": "NOT_DEFINED",
          "modifiedUserInteraction": "NOT_DEFINED",
          "modifiedVulnConfidentialityImpact": "NOT_DEFINED",
          "modifiedVulnIntegrityImpact": "NOT_DEFINED",
          "modifiedVulnAvailabilityImpact": "NOT_DEFINED",
          "modifiedSubConfidentialityImpact": "NOT_DEFINED",
          "modifiedSubIntegrityImpact": "NOT_DEFINED",
          "modifiedSubAvailabilityImpact": "NOT_DEFINED",
          "Safety": "NOT_DEFINED",
          "Automatable": "NOT_DEFINED",
          "Recovery": "NOT_DEFINED",
          "valueDensity": "NOT_DEFINED",
          "vulnerabilityResponseEffort": "NOT_DEFINED",
          "providerUrgency": "NOT_DEFINED"
        }
      }
    ]
  },
  "weaknesses": [
    {
      "source": "security-advisories@github.com",
      "type": "Primary",
      "description": [
        {
          "lang": "en",
          "value": "CWE-200"
        },
        {
          "lang": "en",
          "value": "CWE-287"
        }
      ]
    }
  ],
  "references": [
    {
      "url": "https://github.com/matrix-org/matrix-js-sdk/commit/2fb1e659c81f75253c047832dc9dcc2beddfac5f",
      "source": "security-advisories@github.com"
    },
    {
      "url": "https://github.com/matrix-org/matrix-js-sdk/security/advisories/GHSA-4jf8-g8wp-cx7c",
      "source": "security-advisories@github.com"
    },
    {
      "url": "https://github.com/matrix-org/matrix-spec-proposals/pull/3061",
      "source": "security-advisories@github.com"
    }
  ]
}