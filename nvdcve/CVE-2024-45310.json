{
  "id": "CVE-2024-45310",
  "sourceIdentifier": "security-advisories@github.com",
  "published": "2024-09-03T19:15:15.243",
  "lastModified": "2025-02-21T18:15:17.080",
  "vulnStatus": "Awaiting Analysis",
  "cveTags": [],
  "descriptions": [
    {
      "lang": "en",
      "value": "runc is a CLI tool for spawning and running containers according to the OCI specification. runc 1.1.13 and earlier, as well as 1.2.0-rc2 and earlier, can be tricked into creating empty files or directories in arbitrary locations in the host filesystem by sharing a volume between two containers and exploiting a race with `os.MkdirAll`. While this could be used to create empty files, existing files would not be truncated. An attacker must have the ability to start containers using some kind of custom volume configuration. Containers using user namespaces are still affected, but the scope of places an attacker can create inodes can be significantly reduced. Sufficiently strict LSM policies (SELinux/Apparmor) can also in principle block this attack -- we suspect the industry standard SELinux policy may restrict this attack's scope but the exact scope of protection hasn't been analysed. This is exploitable using runc directly as well as through Docker and Kubernetes. The issue is fixed in runc v1.1.14 and v1.2.0-rc3.\n\nSome workarounds are available. Using user namespaces restricts this attack fairly significantly such that the attacker can only create inodes in directories that the remapped root user/group has write access to. Unless the root user is remapped to an actual\nuser on the host (such as with rootless containers that don't use `/etc/sub[ug]id`), this in practice means that an attacker would only be able to create inodes in world-writable directories. A strict enough SELinux or AppArmor policy could in principle also restrict the scope if a specific label is applied to the runc runtime, though neither the extent to which the standard existing policies block this attack nor what exact policies are needed to sufficiently restrict this attack have been thoroughly tested."
    },
    {
      "lang": "es",
      "value": "runc es una herramienta CLI para generar y ejecutar contenedores de acuerdo con la especificación OCI. runc 1.1.13 y anteriores, así como 1.2.0-rc2 y anteriores, pueden ser engañados para crear archivos o directorios vacíos en ubicaciones arbitrarias en el sistema de archivos del host al compartir un volumen entre dos contenedores y explotar una ejecución con `os.MkdirAll`. Si bien esto podría usarse para crear archivos vacíos, los archivos existentes no se truncarían. Un atacante debe tener la capacidad de iniciar contenedores utilizando algún tipo de configuración de volumen personalizada. Los contenedores que utilizan espacios de nombres de usuario aún se ven afectados, pero el alcance de los lugares en los que un atacante puede crear inodos se puede reducir significativamente. Las políticas LSM suficientemente estrictas (SELinux/Apparmor) también pueden, en principio, bloquear este ataque; sospechamos que la política SELinux estándar de la industria puede restringir el alcance de este ataque, pero no se ha analizado el alcance exacto de la protección. Esto se puede explotar utilizando runc directamente, así como a través de Docker y Kubernetes. El problema se ha solucionado en runc v1.1.14 y v1.2.0-rc3. Hay algunos workarounds disponibles. El uso de espacios de nombres de usuario restringe este ataque de forma bastante significativa, de modo que el atacante solo puede crear inodos en directorios a los que el usuario o grupo raíz reasignado tiene acceso de escritura. A menos que el usuario raíz se reasigne a un usuario real en el host (como con contenedores sin raíz que no usan `/etc/sub[ug]id`), esto en la práctica significa que un atacante solo podría crear inodos en directorios con permisos de escritura para todo el mundo. Una política de SELinux o AppArmor lo suficientemente estricta podría, en principio, restringir también el alcance si se aplica una etiqueta específica al entorno de ejecución de runc, aunque ni el grado en el que las políticas estándar existentes bloquean este ataque ni qué políticas exactas se necesitan para restringirlo lo suficiente se han probado exhaustivamente.runc es una herramienta CLI para generar y ejecutar contenedores de acuerdo con la especificación OCI. runc 1.1.13 y anteriores, así como 1.2.0-rc2 y anteriores, pueden ser engañados para crear archivos o directorios vacíos en ubicaciones arbitrarias en el sistema de archivos del host al compartir un volumen entre dos contenedores y explotar una ejecución con `os.MkdirAll`. Si bien esto podría usarse para crear archivos vacíos, los archivos existentes no se truncarían. Un atacante debe tener la capacidad de iniciar contenedores utilizando algún tipo de configuración de volumen personalizada. Los contenedores que utilizan espacios de nombres de usuario aún se ven afectados, pero el alcance de los lugares en los que un atacante puede crear inodos se puede reducir significativamente. Las políticas LSM suficientemente estrictas (SELinux/Apparmor) también pueden, en principio, bloquear este ataque; sospechamos que la política SELinux estándar de la industria puede restringir el alcance de este ataque, pero no se ha analizado el alcance exacto de la protección. Esto se puede explotar utilizando runc directamente, así como a través de Docker y Kubernetes. El problema se ha solucionado en runc v1.1.14 y v1.2.0-rc3. Hay algunos workarounds disponibles. El uso de espacios de nombres de usuario restringe este ataque de forma bastante significativa, de modo que el atacante solo puede crear inodos en directorios a los que el usuario o grupo raíz reasignado tiene acceso de escritura. A menos que el usuario raíz se reasigne a un usuario real en el host (como con contenedores sin raíz que no usan `/etc/sub[ug]id`), esto en la práctica significa que un atacante solo podría crear inodos en directorios con permisos de escritura para todo el mundo. --- truncado -----"
    }
  ],
  "metrics": {
    "cvssMetricV31": [
      {
        "source": "security-advisories@github.com",
        "type": "Secondary",
        "cvssData": {
          "version": "3.1",
          "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:N/I:L/A:N",
          "baseScore": 3.6,
          "baseSeverity": "LOW",
          "attackVector": "LOCAL",
          "attackComplexity": "LOW",
          "privilegesRequired": "NONE",
          "userInteraction": "REQUIRED",
          "scope": "CHANGED",
          "confidentialityImpact": "NONE",
          "integrityImpact": "LOW",
          "availabilityImpact": "NONE"
        },
        "exploitabilityScore": 1.8,
        "impactScore": 1.4
      }
    ]
  },
  "weaknesses": [
    {
      "source": "security-advisories@github.com",
      "type": "Secondary",
      "description": [
        {
          "lang": "en",
          "value": "CWE-61"
        },
        {
          "lang": "en",
          "value": "CWE-363"
        }
      ]
    }
  ],
  "references": [
    {
      "url": "https://github.com/opencontainers/runc/commit/63c2908164f3a1daea455bf5bcd8d363d70328c7",
      "source": "security-advisories@github.com"
    },
    {
      "url": "https://github.com/opencontainers/runc/commit/8781993968fd964ac723ff5f360b6f259e809a3e",
      "source": "security-advisories@github.com"
    },
    {
      "url": "https://github.com/opencontainers/runc/commit/f0b652ea61ff6750a8fcc69865d45a7abf37accf",
      "source": "security-advisories@github.com"
    },
    {
      "url": "https://github.com/opencontainers/runc/pull/4359",
      "source": "security-advisories@github.com"
    },
    {
      "url": "https://github.com/opencontainers/runc/security/advisories/GHSA-jfvp-7x6p-h2pv",
      "source": "security-advisories@github.com"
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2024/09/03/1",
      "source": "af854a3a-2127-422b-91ae-364da2661108"
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20250221-0008/",
      "source": "af854a3a-2127-422b-91ae-364da2661108"
    }
  ]
}