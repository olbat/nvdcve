{
  "id": "CVE-2023-45814",
  "sourceIdentifier": "security-advisories@github.com",
  "published": "2023-10-18T22:15:09.497",
  "lastModified": "2024-11-21T08:27:24.617",
  "vulnStatus": "Modified",
  "cveTags": [

  ],
  "descriptions": [
    {
      "lang": "en",
      "value": "Bunkum is an open-source protocol-agnostic request server for custom game servers. First, a little bit of background. So, in the beginning, Bunkum's `AuthenticationService` only supported injecting `IUser`s. However, as Refresh and SoundShapesServer implemented permissions systems support for injecting `IToken`s into endpoints was added. All was well until 4.0. Bunkum 4.0 then changed to enforce relations between `IToken`s and `IUser`s. This wasn't implemented in a very good way in the `AuthenticationService`, and ended up breaking caching in such a way that cached tokens would persist after the lifetime of the request - since we tried to cache both tokens and users. From that point until now, from what I understand, Bunkum was attempting to use that cached token at the start of the next request once cached. Naturally, when that token expired, downstream projects like Refresh would remove the object from Realm - and cause the object in the cache to be in a detached state, causing an exception from invalid use of `IToken.User`. So in other words, a use-after-free since Realm can't manage the lifetime of the cached token. Security-wise, the scope is fairly limited, can only be pulled off on a couple endpoints given a few conditions, and you can't guarantee which token you're going to get. Also, the token *would* get invalidated properly if the endpoint had either a `IToken` usage or a `IUser` usage. The fix is to just wipe the token cache after the request was handled, which is now in `4.2.1`. Users are advised to upgrade. There are no known workarounds for this vulnerability."
    },
    {
      "lang": "es",
      "value": "Bunkum es un servidor de solicitudes independiente del protocolo de código abierto para servidores de juegos personalizados. Primero, un poco de historia. Entonces, al principio, el \"AuthenticationService\" de Bunkum solo admitía la inyección de \"IUser\". Sin embargo, a medida que Refresh y SoundShapesServer implementaron sistemas de permisos, se agregó soporte para inyectar \"IToken\" en los endpoints. Todo estuvo bien hasta el 4.0. Bunkum 4.0, luego cambió para imponer relaciones entre `IToken`s e `IUser`s. Esto no se implementó de muy buena manera en `AuthenticationService` y terminó rompiendo el almacenamiento en caché de tal manera que los tokens almacenados en caché persistirían después de la vida útil de la solicitud, ya que intentamos almacenar en caché tanto los tokens como los usuarios. Desde ese momento hasta ahora, según tengo entendido, Bunkum estaba intentando usar ese token almacenado en caché al comienzo de la siguiente solicitud una vez almacenado en caché. Naturalmente, cuando ese token expiró, los proyectos posteriores como Refresh eliminarían el objeto de Realm y provocarían que el objeto en el caché estuviera en un estado separado, lo que provocaría una excepción por el uso no válido de `IToken.User`. En otras palabras, un use-after-free ya que Realm no puede administrar la vida útil del token almacenado en caché. En cuanto a la seguridad, el alcance es bastante limitado, solo se puede implementar en un par de endpoints dadas algunas condiciones y no se puede garantizar qué token obtendrá. Además, el token *would* invalidaría correctamente si el endpoint tuviera un uso de \"IToken\" o un uso de \"IUser\". La solución es simplemente borrar el caché del token después de que se manejó la solicitud, que ahora está en `4.2.1`. Se recomienda a los usuarios que actualicen. No se conocen workarounds para esta vulnerabilidad."
    }
  ],
  "metrics": {
    "cvssMetricV31": [
      {
        "source": "security-advisories@github.com",
        "type": "Secondary",
        "cvssData": {
          "version": "3.1",
          "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
          "baseScore": 5.3,
          "baseSeverity": "MEDIUM",
          "attackVector": "NETWORK",
          "attackComplexity": "LOW",
          "privilegesRequired": "NONE",
          "userInteraction": "NONE",
          "scope": "UNCHANGED",
          "confidentialityImpact": "LOW",
          "integrityImpact": "NONE",
          "availabilityImpact": "NONE"
        },
        "exploitabilityScore": 3.9,
        "impactScore": 1.4
      },
      {
        "source": "nvd@nist.gov",
        "type": "Primary",
        "cvssData": {
          "version": "3.1",
          "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
          "baseScore": 5.3,
          "baseSeverity": "MEDIUM",
          "attackVector": "NETWORK",
          "attackComplexity": "LOW",
          "privilegesRequired": "NONE",
          "userInteraction": "NONE",
          "scope": "UNCHANGED",
          "confidentialityImpact": "LOW",
          "integrityImpact": "NONE",
          "availabilityImpact": "NONE"
        },
        "exploitabilityScore": 3.9,
        "impactScore": 1.4
      }
    ]
  },
  "weaknesses": [
    {
      "source": "security-advisories@github.com",
      "type": "Secondary",
      "description": [
        {
          "lang": "en",
          "value": "CWE-772"
        }
      ]
    },
    {
      "source": "nvd@nist.gov",
      "type": "Primary",
      "description": [
        {
          "lang": "en",
          "value": "CWE-772"
        }
      ]
    }
  ],
  "configurations": [
    {
      "nodes": [
        {
          "operator": "OR",
          "negate": false,
          "cpeMatch": [
            {
              "vulnerable": true,
              "criteria": "cpe:2.3:a:littlebigfresh:bunkum:*:*:*:*:*:*:*:*",
              "versionStartIncluding": "4.0",
              "versionEndExcluding": "4.2.1",
              "matchCriteriaId": "F4F0D6F2-C400-42D2-BFC4-908EC8742FDA"
            }
          ]
        }
      ]
    }
  ],
  "references": [
    {
      "url": "https://github.com/LittleBigRefresh/Bunkum/commit/6e109464ed9255f558182f001f475a378405ff76",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/LittleBigRefresh/Bunkum/security/advisories/GHSA-jrf2-h5j6-3rrq",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/LittleBigRefresh/Bunkum/commit/6e109464ed9255f558182f001f475a378405ff76",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/LittleBigRefresh/Bunkum/security/advisories/GHSA-jrf2-h5j6-3rrq",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ]
}