{
  "cve": {
    "data_type": "CVE",
    "data_format": "MITRE",
    "data_version": "4.0",
    "CVE_data_meta": {
      "ID": "CVE-2022-49174",
      "ASSIGNER": "cve@kernel.org"
    },
    "problemtype": {
      "problemtype_data": [
        {
          "description": []
        }
      ]
    },
    "references": {
      "reference_data": [
        {
          "url": "https://git.kernel.org/stable/c/6a6beb074186a0452368a023a261c7d0eaebe838",
          "name": "https://git.kernel.org/stable/c/6a6beb074186a0452368a023a261c7d0eaebe838",
          "refsource": "",
          "tags": []
        },
        {
          "url": "https://git.kernel.org/stable/c/803fb0e8240cc16585a5c9df76add1dfaa781773",
          "name": "https://git.kernel.org/stable/c/803fb0e8240cc16585a5c9df76add1dfaa781773",
          "refsource": "",
          "tags": []
        },
        {
          "url": "https://git.kernel.org/stable/c/b07eedd0222e9548ffc568ec429bb1f61d21a39c",
          "name": "https://git.kernel.org/stable/c/b07eedd0222e9548ffc568ec429bb1f61d21a39c",
          "refsource": "",
          "tags": []
        },
        {
          "url": "https://git.kernel.org/stable/c/bfdc502a4a4c058bf4cbb1df0c297761d528f54d",
          "name": "https://git.kernel.org/stable/c/bfdc502a4a4c058bf4cbb1df0c297761d528f54d",
          "refsource": "",
          "tags": []
        },
        {
          "url": "https://git.kernel.org/stable/c/cd6d719534af993210306f8a13f9cb3e615f7c8d",
          "name": "https://git.kernel.org/stable/c/cd6d719534af993210306f8a13f9cb3e615f7c8d",
          "refsource": "",
          "tags": []
        }
      ]
    },
    "description": {
      "description_data": [
        {
          "lang": "en",
          "value": "In the Linux kernel, the following vulnerability has been resolved:\n\next4: fix ext4_mb_mark_bb() with flex_bg with fast_commit\n\nIn case of flex_bg feature (which is by default enabled), extents for\nany given inode might span across blocks from two different block group.\next4_mb_mark_bb() only reads the buffer_head of block bitmap once for the\nstarting block group, but it fails to read it again when the extent length\nboundary overflows to another block group. Then in this below loop it\naccesses memory beyond the block group bitmap buffer_head and results\ninto a data abort.\n\n\tfor (i = 0; i < clen; i++)\n\t\tif (!mb_test_bit(blkoff + i, bitmap_bh->b_data) == !state)\n\t\t\talready++;\n\nThis patch adds this functionality for checking block group boundary in\next4_mb_mark_bb() and update the buffer_head(bitmap_bh) for every different\nblock group.\n\nw/o this patch, I was easily able to hit a data access abort using Power platform.\n\n<...>\n[   74.327662] EXT4-fs error (device loop3): ext4_mb_generate_buddy:1141: group 11, block bitmap and bg descriptor inconsistent: 21248 vs 23294 free clusters\n[   74.533214] EXT4-fs (loop3): shut down requested (2)\n[   74.536705] Aborting journal on device loop3-8.\n[   74.702705] BUG: Unable to handle kernel data access on read at 0xc00000005e980000\n[   74.703727] Faulting instruction address: 0xc0000000007bffb8\ncpu 0xd: Vector: 300 (Data Access) at [c000000015db7060]\n    pc: c0000000007bffb8: ext4_mb_mark_bb+0x198/0x5a0\n    lr: c0000000007bfeec: ext4_mb_mark_bb+0xcc/0x5a0\n    sp: c000000015db7300\n   msr: 800000000280b033\n   dar: c00000005e980000\n dsisr: 40000000\n  current = 0xc000000027af6880\n  paca    = 0xc00000003ffd5200   irqmask: 0x03   irq_happened: 0x01\n    pid   = 5167, comm = mount\n<...>\nenter ? for help\n[c000000015db7380] c000000000782708 ext4_ext_clear_bb+0x378/0x410\n[c000000015db7400] c000000000813f14 ext4_fc_replay+0x1794/0x2000\n[c000000015db7580] c000000000833f7c do_one_pass+0xe9c/0x12a0\n[c000000015db7710] c000000000834504 jbd2_journal_recover+0x184/0x2d0\n[c000000015db77c0] c000000000841398 jbd2_journal_load+0x188/0x4a0\n[c000000015db7880] c000000000804de8 ext4_fill_super+0x2638/0x3e10\n[c000000015db7a40] c0000000005f8404 get_tree_bdev+0x2b4/0x350\n[c000000015db7ae0] c0000000007ef058 ext4_get_tree+0x28/0x40\n[c000000015db7b00] c0000000005f6344 vfs_get_tree+0x44/0x100\n[c000000015db7b70] c00000000063c408 path_mount+0xdd8/0xe70\n[c000000015db7c40] c00000000063c8f0 sys_mount+0x450/0x550\n[c000000015db7d50] c000000000035770 system_call_exception+0x4a0/0x4e0\n[c000000015db7e10] c00000000000c74c system_call_common+0xec/0x250"
        }
      ]
    }
  },
  "configurations": {
    "CVE_data_version": "4.0",
    "nodes": []
  },
  "impact": {},
  "publishedDate": "2025-02-26T07:00Z",
  "lastModifiedDate": "2025-02-26T07:00Z"
}