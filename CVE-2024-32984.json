{
  "id": "CVE-2024-32984",
  "sourceIdentifier": "security-advisories@github.com",
  "published": "2024-05-01T11:15:47.633",
  "lastModified": "2024-11-21T09:16:10.157",
  "vulnStatus": "Awaiting Analysis",
  "cveTags": [],
  "descriptions": [
    {
      "lang": "en",
      "value": "Yamux is a stream multiplexer over reliable, ordered connections such as TCP/IP. The Rust implementation of the Yamux stream multiplexer uses a vector for pending frames. This vector is not bounded in length. Every time the Yamux protocol requires sending of a new frame, this frame gets appended to this vector. This can be remotely triggered in a number of ways, for example by: 1. Opening a new libp2p Identify stream. This causes the node to send its Identify message. Of course, every other protocol that causes the sending of data also works. The larger the response, the more data is enqueued. 2. Sending a Yamux Ping frame. This causes a Pong frame to be enqueued. Under normal circumstances, this queue of pending frames would be drained once they’re sent out over the network. However, the attacker can use TCP’s receive window mechanism to prevent the victim from sending out any data: By not reading from the TCP connection, the receive window will never be increased, and the victim won’t be able to send out any new data (this is how TCP implements backpressure). Once this happens, Yamux’s queue of pending frames will start growing indefinitely. The queue will only be drained once the underlying TCP connection is closed. An attacker can cause a remote node to run out of memory, which will result in the corresponding process getting terminated by the operating system.\n"
    },
    {
      "lang": "es",
      "value": "Yamux es un multiplexor de flujo a través de conexiones ordenadas y confiables como TCP/IP. La implementación Rust del multiplexor de flujo Yamux utiliza un vector para tramas pendientes. Este vector no está limitado en longitud. Cada vez que el protocolo Yamux requiere el envío de una nueva trama, esta trama se agrega a este vector. Esto se puede activar de forma remota de varias maneras, por ejemplo: 1. Abriendo una nueva secuencia de identificación libp2p. Esto hace que el nodo envíe su mensaje de identificación. Por supuesto, también funcionan todos los demás protocolos que provocan el envío de datos. Cuanto mayor sea la respuesta, más datos se pondrán en cola. 2. Envío de una trama Ping de Yamux. Esto hace que una trama Pong se ponga en cola. En circunstancias normales, esta cola de tramas pendientes se agotaría una vez que se envíen a través de la red. Sin embargo, el atacante puede utilizar el mecanismo de ventana de recepción de TCP para evitar que la víctima envíe datos: al no leer desde la conexión TCP, la ventana de recepción nunca aumentará y la víctima no podrá enviar ningún dato nuevo. (Así es como TCP implementa la contrapresión). Una vez que esto suceda, la cola de fotogramas pendientes de Yamux comenzará a crecer indefinidamente. La cola solo se drenará una vez que se cierre la conexión TCP subyacente. Un atacante puede hacer que un nodo remoto se quede sin memoria, lo que provocará que el sistema operativo finalice el proceso correspondiente."
    }
  ],
  "metrics": {
    "cvssMetricV31": [
      {
        "source": "security-advisories@github.com",
        "type": "Secondary",
        "cvssData": {
          "version": "3.1",
          "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "baseScore": 7.5,
          "baseSeverity": "HIGH",
          "attackVector": "NETWORK",
          "attackComplexity": "LOW",
          "privilegesRequired": "NONE",
          "userInteraction": "NONE",
          "scope": "UNCHANGED",
          "confidentialityImpact": "NONE",
          "integrityImpact": "NONE",
          "availabilityImpact": "HIGH"
        },
        "exploitabilityScore": 3.9,
        "impactScore": 3.6
      }
    ]
  },
  "weaknesses": [
    {
      "source": "security-advisories@github.com",
      "type": "Secondary",
      "description": [
        {
          "lang": "en",
          "value": "CWE-400"
        }
      ]
    }
  ],
  "references": [
    {
      "url": "https://github.com/libp2p/rust-yamux/blob/yamux-v0.13.1/yamux/src/connection.rs#L289",
      "source": "security-advisories@github.com"
    },
    {
      "url": "https://github.com/libp2p/rust-yamux/security/advisories/GHSA-3999-5ffv-wp2r",
      "source": "security-advisories@github.com"
    },
    {
      "url": "https://github.com/sigp/rust-yamux/commit/6689e227a48258a52347cd1d984adfc94afc6f7a",
      "source": "security-advisories@github.com"
    },
    {
      "url": "https://github.com/libp2p/rust-yamux/blob/yamux-v0.13.1/yamux/src/connection.rs#L289",
      "source": "af854a3a-2127-422b-91ae-364da2661108"
    },
    {
      "url": "https://github.com/libp2p/rust-yamux/security/advisories/GHSA-3999-5ffv-wp2r",
      "source": "af854a3a-2127-422b-91ae-364da2661108"
    },
    {
      "url": "https://github.com/sigp/rust-yamux/commit/6689e227a48258a52347cd1d984adfc94afc6f7a",
      "source": "af854a3a-2127-422b-91ae-364da2661108"
    }
  ]
}