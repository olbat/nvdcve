{
  "id": "CVE-2022-31104",
  "sourceIdentifier": "security-advisories@github.com",
  "published": "2022-06-28T00:15:08.177",
  "lastModified": "2024-11-21T07:03:54.137",
  "vulnStatus": "Modified",
  "cveTags": [],
  "descriptions": [
    {
      "lang": "en",
      "value": "Wasmtime is a standalone runtime for WebAssembly. In affected versions wasmtime's implementation of the SIMD proposal for WebAssembly on x86_64 contained two distinct bugs in the instruction lowerings implemented in Cranelift. The aarch64 implementation of the simd proposal is not affected. The bugs were presented in the `i8x16.swizzle` and `select` WebAssembly instructions. The `select` instruction is only affected when the inputs are of `v128` type. The correspondingly affected Cranelift instructions were `swizzle` and `select`. The `swizzle` instruction lowering in Cranelift erroneously overwrote the mask input register which could corrupt a constant value, for example. This means that future uses of the same constant may see a different value than the constant itself. The `select` instruction lowering in Cranelift wasn't correctly implemented for vector types that are 128-bits wide. When the condition was 0 the wrong instruction was used to move the correct input to the output of the instruction meaning that only the low 32 bits were moved and the upper 96 bits of the result were left as whatever the register previously contained (instead of the input being moved from). The `select` instruction worked correctly if the condition was nonzero, however. This bug in Wasmtime's implementation of these instructions on x86_64 represents an incorrect implementation of the specified semantics of these instructions according to the WebAssembly specification. The impact of this is benign for hosts running WebAssembly but represents possible vulnerabilities within the execution of a guest program. For example a WebAssembly program could take unintended branches or materialize incorrect values internally which runs the risk of exposing the program itself to other related vulnerabilities which can occur from miscompilations. We have released Wasmtime 0.38.1 and cranelift-codegen (and other associated cranelift crates) 0.85.1 which contain the corrected implementations of these two instructions in Cranelift. If upgrading is not an option for you at this time, you can avoid the vulnerability by disabling the Wasm simd proposal. Additionally the bug is only present on x86_64 hosts. Other aarch64 hosts are not affected. Note that s390x hosts don't yet implement the simd proposal and are not affected."
    },
    {
      "lang": "es",
      "value": "Wasmtime es un runtime independiente para WebAssembly. En las versiones afectadas, la implementación de wasmtime de la propuesta SIMD para WebAssembly en x86_64 contenía dos errores distintos en los rebajes de instrucciones implementados en Cranelift. La implementación aarch64 de la propuesta simd no está afectada. Los errores eran presentados en las instrucciones \"i8x16.swizzle\" y \"select\" de WebAssembly. La instrucción \"select\" sólo está afectada cuando las entradas son de tipo \"v128\". Las instrucciones de Cranelift afectadas son \"swizzle\" y \"select\". La instrucción \"swizzle\" que bajaba en Cranelift sobrescribía erróneamente el registro de entrada de la máscara, lo que podía corromper un valor constante, por ejemplo. Esto significa que los futuros usos de la misma constante pueden ver un valor diferente al de la propia constante. La instrucción \"select\" que baja en Cranelift no estaba correctamente implementada para los tipos de vectores que presentan 128 bits de ancho. Cuando la condición era 0, es usada la instrucción incorrecta para mover la entrada correcta a la salida de la instrucción, lo que significaba que sólo eran movidos los 32 bits inferiores y los 96 bits superiores del resultado quedaban como lo que contenía el registro anteriormente (en lugar de la entrada que era movida). Sin embargo, la instrucción \"select\" funcionaba correctamente si la condición era distinta de cero. Este error en la implementación de Wasmtime de estas instrucciones en x86_64 representa una implementación incorrecta de la semántica especificada de estas instrucciones según la especificación de WebAssembly. El impacto de esto es benigno para los hosts que ejecutan WebAssembly pero representa posibles vulnerabilidades dentro de la ejecución de un programa invitado. Por ejemplo, un programa WebAssembly podría tomar ramas no deseadas o materializar valores incorrectos internamente, lo que corre el riesgo de exponer el propio programa a otras vulnerabilidades relacionadas que pueden ocurrir por compilaciones erróneas. Hemos publicado Wasmtime versión 0.38.1 y cranelift-codegen (y otras cajas asociadas de cranelift) versión 0.85.1 que contienen las implementaciones corregidas de estas dos instrucciones en Cranelift. Si la actualización no es una opción para usted en este momento, puede evitar la vulnerabilidad al deshabilitar la propuesta Wasm simd. Además, el bug sólo está presente en hosts x86_64. Otros hosts aarch64 no están afectados. Tenga en cuenta que los hosts s390x aún no implementan la propuesta simd y no están afectados"
    }
  ],
  "metrics": {
    "cvssMetricV31": [
      {
        "source": "security-advisories@github.com",
        "type": "Secondary",
        "cvssData": {
          "version": "3.1",
          "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:L",
          "baseScore": 4.8,
          "baseSeverity": "MEDIUM",
          "attackVector": "NETWORK",
          "attackComplexity": "HIGH",
          "privilegesRequired": "NONE",
          "userInteraction": "NONE",
          "scope": "UNCHANGED",
          "confidentialityImpact": "NONE",
          "integrityImpact": "LOW",
          "availabilityImpact": "LOW"
        },
        "exploitabilityScore": 2.2,
        "impactScore": 2.5
      },
      {
        "source": "nvd@nist.gov",
        "type": "Primary",
        "cvssData": {
          "version": "3.1",
          "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
          "baseScore": 5.6,
          "baseSeverity": "MEDIUM",
          "attackVector": "NETWORK",
          "attackComplexity": "HIGH",
          "privilegesRequired": "NONE",
          "userInteraction": "NONE",
          "scope": "UNCHANGED",
          "confidentialityImpact": "LOW",
          "integrityImpact": "LOW",
          "availabilityImpact": "LOW"
        },
        "exploitabilityScore": 2.2,
        "impactScore": 3.4
      }
    ],
    "cvssMetricV2": [
      {
        "source": "nvd@nist.gov",
        "type": "Primary",
        "cvssData": {
          "version": "2.0",
          "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
          "baseScore": 6.8,
          "accessVector": "NETWORK",
          "accessComplexity": "MEDIUM",
          "authentication": "NONE",
          "confidentialityImpact": "PARTIAL",
          "integrityImpact": "PARTIAL",
          "availabilityImpact": "PARTIAL"
        },
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 8.6,
        "impactScore": 6.4,
        "acInsufInfo": false,
        "obtainAllPrivilege": false,
        "obtainUserPrivilege": false,
        "obtainOtherPrivilege": false,
        "userInteractionRequired": false
      }
    ]
  },
  "weaknesses": [
    {
      "source": "security-advisories@github.com",
      "type": "Primary",
      "description": [
        {
          "lang": "en",
          "value": "CWE-682"
        }
      ]
    }
  ],
  "configurations": [
    {
      "nodes": [
        {
          "operator": "OR",
          "negate": false,
          "cpeMatch": [
            {
              "vulnerable": true,
              "criteria": "cpe:2.3:a:bytecodealliance:cranelift-codegen:*:*:*:*:*:rust:*:*",
              "versionEndExcluding": "0.85.0",
              "matchCriteriaId": "A97CC30F-E8C8-4589-91CB-8423704C5C5D"
            },
            {
              "vulnerable": true,
              "criteria": "cpe:2.3:a:bytecodealliance:wasmtime:*:*:*:*:*:rust:*:*",
              "versionEndExcluding": "0.38.1",
              "matchCriteriaId": "B9C6651A-233F-40DD-AB1B-1A435F97728B"
            }
          ]
        }
      ]
    }
  ],
  "references": [
    {
      "url": "https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.wasm_simd",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/bytecodealliance/wasmtime/pull/4317",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/bytecodealliance/wasmtime/pull/4318",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-jqwc-c49r-4w2x",
      "source": "security-advisories@github.com",
      "tags": [
        "Mitigation",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/webassembly/simd",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://webassembly.github.io/spec/",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.wasm_simd",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/bytecodealliance/wasmtime/pull/4317",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/bytecodealliance/wasmtime/pull/4318",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-jqwc-c49r-4w2x",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mitigation",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/webassembly/simd",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://webassembly.github.io/spec/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ]
}