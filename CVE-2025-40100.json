{
  "id": "CVE-2025-40100",
  "sourceIdentifier": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
  "published": "2025-10-30T10:15:34.423",
  "lastModified": "2025-10-30T15:03:13.440",
  "vulnStatus": "Awaiting Analysis",
  "cveTags": [],
  "descriptions": [
    {
      "lang": "en",
      "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nbtrfs: do not assert we found block group item when creating free space tree\n\nCurrently, when building a free space tree at populate_free_space_tree(),\nif we are not using the block group tree feature, we always expect to find\nblock group items (either extent items or a block group item with key type\nBTRFS_BLOCK_GROUP_ITEM_KEY) when we search the extent tree with\nbtrfs_search_slot_for_read(), so we assert that we found an item. However\nthis expectation is wrong since we can have a new block group created in\nthe current transaction which is still empty and for which we still have\nnot added the block group's item to the extent tree, in which case we do\nnot have any items in the extent tree associated to the block group.\n\nThe insertion of a new block group's block group item in the extent tree\nhappens at btrfs_create_pending_block_groups() when it calls the helper\ninsert_block_group_item(). This typically is done when a transaction\nhandle is released, committed or when running delayed refs (either as\npart of a transaction commit or when serving tickets for space reservation\nif we are low on free space).\n\nSo remove the assertion at populate_free_space_tree() even when the block\ngroup tree feature is not enabled and update the comment to mention this\ncase.\n\nSyzbot reported this with the following stack trace:\n\n  BTRFS info (device loop3 state M): rebuilding free space tree\n  assertion failed: ret == 0 :: 0, in fs/btrfs/free-space-tree.c:1115\n  ------------[ cut here ]------------\n  kernel BUG at fs/btrfs/free-space-tree.c:1115!\n  Oops: invalid opcode: 0000 [#1] SMP KASAN PTI\n  CPU: 1 UID: 0 PID: 6352 Comm: syz.3.25 Not tainted syzkaller #0 PREEMPT(full)\n  Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 08/18/2025\n  RIP: 0010:populate_free_space_tree+0x700/0x710 fs/btrfs/free-space-tree.c:1115\n  Code: ff ff e8 d3 (...)\n  RSP: 0018:ffffc9000430f780 EFLAGS: 00010246\n  RAX: 0000000000000043 RBX: ffff88805b709630 RCX: fea61d0e2e79d000\n  RDX: 0000000000000000 RSI: 0000000080000000 RDI: 0000000000000000\n  RBP: ffffc9000430f8b0 R08: ffffc9000430f4a7 R09: 1ffff92000861e94\n  R10: dffffc0000000000 R11: fffff52000861e95 R12: 0000000000000001\n  R13: 1ffff92000861f00 R14: dffffc0000000000 R15: 0000000000000000\n  FS:  00007f424d9fe6c0(0000) GS:ffff888125afc000(0000) knlGS:0000000000000000\n  CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n  CR2: 00007fd78ad212c0 CR3: 0000000076d68000 CR4: 00000000003526f0\n  Call Trace:\n   <TASK>\n   btrfs_rebuild_free_space_tree+0x1ba/0x6d0 fs/btrfs/free-space-tree.c:1364\n   btrfs_start_pre_rw_mount+0x128f/0x1bf0 fs/btrfs/disk-io.c:3062\n   btrfs_remount_rw fs/btrfs/super.c:1334 [inline]\n   btrfs_reconfigure+0xaed/0x2160 fs/btrfs/super.c:1559\n   reconfigure_super+0x227/0x890 fs/super.c:1076\n   do_remount fs/namespace.c:3279 [inline]\n   path_mount+0xd1a/0xfe0 fs/namespace.c:4027\n   do_mount fs/namespace.c:4048 [inline]\n   __do_sys_mount fs/namespace.c:4236 [inline]\n   __se_sys_mount+0x313/0x410 fs/namespace.c:4213\n   do_syscall_x64 arch/x86/entry/syscall_64.c:63 [inline]\n   do_syscall_64+0xfa/0xfa0 arch/x86/entry/syscall_64.c:94\n   entry_SYSCALL_64_after_hwframe+0x77/0x7f\n   RIP: 0033:0x7f424e39066a\n  Code: d8 64 89 02 (...)\n  RSP: 002b:00007f424d9fde68 EFLAGS: 00000246 ORIG_RAX: 00000000000000a5\n  RAX: ffffffffffffffda RBX: 00007f424d9fdef0 RCX: 00007f424e39066a\n  RDX: 0000200000000180 RSI: 0000200000000380 RDI: 0000000000000000\n  RBP: 0000200000000180 R08: 00007f424d9fdef0 R09: 0000000000000020\n  R10: 0000000000000020 R11: 0000000000000246 R12: 0000200000000380\n  R13: 00007f424d9fdeb0 R14: 0000000000000000 R15: 00002000000002c0\n   </TASK>\n  Modules linked in:\n  ---[ end trace 0000000000000000 ]---"
    }
  ],
  "metrics": {},
  "references": [
    {
      "url": "https://git.kernel.org/stable/c/289498da343b05c886f19b4269429606f86dd17b",
      "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"
    },
    {
      "url": "https://git.kernel.org/stable/c/3fdcfd91b93f930d87843156c7c8cc5fbcf9b144",
      "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"
    },
    {
      "url": "https://git.kernel.org/stable/c/4f4b9ca73f84130d9fbb0fc02306ce94ce8bdbe6",
      "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"
    },
    {
      "url": "https://git.kernel.org/stable/c/a5a51bf4e9b7354ce7cd697e610d72c1b33fd949",
      "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"
    },
    {
      "url": "https://git.kernel.org/stable/c/eb145463f22d7d32d426b29fe9810de9e792b6ba",
      "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"
    }
  ]
}