{
  "id": "CVE-2025-29779",
  "sourceIdentifier": "security-advisories@github.com",
  "published": "2025-03-14T18:15:32.330",
  "lastModified": "2025-03-19T16:15:32.157",
  "vulnStatus": "Awaiting Analysis",
  "cveTags": [],
  "descriptions": [
    {
      "lang": "en",
      "value": "Post-Quantum Secure Feldman's Verifiable Secret Sharing provides a Python implementation of Feldman's Verifiable Secret Sharing (VSS) scheme. In versions 0.8.0b2 and prior, the `secure_redundant_execution` function in feldman_vss.py attempts to mitigate fault injection attacks by executing a function multiple times and comparing results. However, several critical weaknesses exist. Python's execution environment cannot guarantee true isolation between redundant executions, the constant-time comparison implementation in Python is subject to timing variations, the randomized execution order and timing provide insufficient protection against sophisticated fault attacks, and the error handling may leak timing information about partial execution results. These limitations make the protection ineffective against targeted fault injection attacks, especially from attackers with physical access to the hardware. A successful fault injection attack could allow an attacker to bypass the redundancy check mechanisms, extract secret polynomial coefficients during share generation or verification, force the acceptance of invalid shares during verification, and/or manipulate the commitment verification process to accept fraudulent commitments. This undermines the core security guarantees of the Verifiable Secret Sharing scheme. As of time of publication, no patched versions of Post-Quantum Secure Feldman's Verifiable Secret Sharing exist, but other mitigations are available. Long-term remediation requires reimplementing the security-critical functions in a lower-level language like Rust. Short-term mitigations include deploying the software in environments with physical security controls, increasing the redundancy count (from 5 to a higher number) by modifying the source code, adding external verification of cryptographic operations when possible, considering using hardware security modules (HSMs) for key operations."
    },
    {
      "lang": "es",
      "value": "Post-Quantum Secure Feldman's Verifiable Secret Sharing proporciona una implementación en Python del esquema de intercambio de secretos verificables (VSS) de Feldman. En las versiones 0.7.6b0 y anteriores, la función `secure_redundant_execution` de feldman_vss.py intenta mitigar los ataques de inyección de fallos mediante la ejecución de una función varias veces y la comparación de los resultados. Sin embargo, existen varias debilidades críticas. El entorno de ejecución de Python no puede garantizar un aislamiento real entre ejecuciones redundantes, la implementación de comparación en tiempo constante en Python está sujeta a variaciones de tiempo, el orden y la sincronización de ejecución aleatorios no ofrecen suficiente protección contra ataques de fallos sofisticados, y la gestión de errores puede filtrar información de tiempo sobre resultados de ejecución parciales. Estas limitaciones hacen que la protección sea ineficaz contra ataques de inyección de fallos dirigidos, especialmente de atacantes con acceso físico al hardware. Un ataque de inyección de fallos exitoso podría permitir a un atacante eludir los mecanismos de comprobación de redundancia, extraer coeficientes polinómicos secretos durante la generación o verificación de acciones, forzar la aceptación de acciones no válidas durante la verificación o manipular el proceso de verificación de compromisos para aceptar compromisos fraudulentos. Esto socava las garantías de seguridad fundamentales del esquema de Intercambio de Secretos Verificables. Al momento de la publicación, no existían versiones parcheadas del Intercambio de Secretos Verificables de Feldman de Post-Quantum Secure, pero sí existen otras mitigaciones. La solución a largo plazo requiere reimplementar las funciones críticas para la seguridad en un lenguaje de bajo nivel como Rust. Las mitigaciones a corto plazo incluyen la implementación del software en entornos con controles de seguridad físicos, el aumento de la redundancia (de 5 a un número mayor) modificando el código fuente, la adición de verificación externa de las operaciones criptográficas cuando sea posible y la consideración del uso de módulos de seguridad de hardware (HSM) para las operaciones clave."
    }
  ],
  "metrics": {
    "cvssMetricV40": [
      {
        "source": "security-advisories@github.com",
        "type": "Secondary",
        "cvssData": {
          "version": "4.0",
          "vectorString": "CVSS:4.0/AV:P/AC:H/AT:P/PR:N/UI:N/VC:H/VI:H/VA:H/SC:N/SI:N/SA:N/E:X/CR:X/IR:X/AR:X/MAV:X/MAC:X/MAT:X/MPR:X/MUI:X/MVC:X/MVI:X/MVA:X/MSC:X/MSI:X/MSA:X/S:X/AU:X/R:X/V:X/RE:X/U:X",
          "baseScore": 5.4,
          "baseSeverity": "MEDIUM",
          "attackVector": "PHYSICAL",
          "attackComplexity": "HIGH",
          "attackRequirements": "PRESENT",
          "privilegesRequired": "NONE",
          "userInteraction": "NONE",
          "vulnConfidentialityImpact": "HIGH",
          "vulnIntegrityImpact": "HIGH",
          "vulnAvailabilityImpact": "HIGH",
          "subConfidentialityImpact": "NONE",
          "subIntegrityImpact": "NONE",
          "subAvailabilityImpact": "NONE",
          "exploitMaturity": "NOT_DEFINED",
          "confidentialityRequirement": "NOT_DEFINED",
          "integrityRequirement": "NOT_DEFINED",
          "availabilityRequirement": "NOT_DEFINED",
          "modifiedAttackVector": "NOT_DEFINED",
          "modifiedAttackComplexity": "NOT_DEFINED",
          "modifiedAttackRequirements": "NOT_DEFINED",
          "modifiedPrivilegesRequired": "NOT_DEFINED",
          "modifiedUserInteraction": "NOT_DEFINED",
          "modifiedVulnConfidentialityImpact": "NOT_DEFINED",
          "modifiedVulnIntegrityImpact": "NOT_DEFINED",
          "modifiedVulnAvailabilityImpact": "NOT_DEFINED",
          "modifiedSubConfidentialityImpact": "NOT_DEFINED",
          "modifiedSubIntegrityImpact": "NOT_DEFINED",
          "modifiedSubAvailabilityImpact": "NOT_DEFINED",
          "Safety": "NOT_DEFINED",
          "Automatable": "NOT_DEFINED",
          "Recovery": "NOT_DEFINED",
          "valueDensity": "NOT_DEFINED",
          "vulnerabilityResponseEffort": "NOT_DEFINED",
          "providerUrgency": "NOT_DEFINED"
        }
      }
    ]
  },
  "weaknesses": [
    {
      "source": "security-advisories@github.com",
      "type": "Secondary",
      "description": [
        {
          "lang": "en",
          "value": "CWE-1240"
        },
        {
          "lang": "en",
          "value": "CWE-1279"
        }
      ]
    }
  ],
  "references": [
    {
      "url": "https://en.wikipedia.org/wiki/Fault_attack",
      "source": "security-advisories@github.com"
    },
    {
      "url": "https://eprint.iacr.org/2004/100.pdf",
      "source": "security-advisories@github.com"
    },
    {
      "url": "https://github.com/DavidOsipov/PostQuantum-Feldman-VSS/security/advisories/GHSA-r8gc-qc2c-c7vh",
      "source": "security-advisories@github.com"
    }
  ]
}