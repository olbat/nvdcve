{
  "id": "CVE-2024-49756",
  "sourceIdentifier": "security-advisories@github.com",
  "published": "2024-10-23T17:15:19.250",
  "lastModified": "2024-10-25T12:56:36.827",
  "vulnStatus": "Awaiting Analysis",
  "cveTags": [],
  "descriptions": [
    {
      "lang": "en",
      "value": "AshPostgres is the PostgreSQL data layer for Ash Framework. Starting in version 2.0.0 and prior to version 2.4.10, in certain very specific situations, it was possible for the policies of an update action to be skipped. This occurred only on \"empty\" update actions (no changing fields), and would allow their hooks (side effects) to be performed when they should not have been. Note that this does not allow reading new data that the user should not have had access to, only triggering a side effect a user should not have been able to trigger.\n\nTo be vulnerable, an affected user must have an update action that is on a resource with no attributes containing an \"update default\" (updated_at timestamp, for example); can be performed atomically; does not have `require_atomic? false`; has at least one authorizer (typically `Ash.Policy.Authorizer`); and has at least one `change` (on the resource's `changes` block or in the action itself). This is where the side-effects would be performed when they should not have been.\n\nThis problem has been patched in `2.4.10` of `ash_postgres`. Several workarounds are available. Potentially affected users may determine that none of their actions are vulnerable using a script the maintainers provide in the GitHub Security Advisory, add `require_atomic? false` to any potentially affected update action, replace any usage of `Ash.update` with `Ash.bulk_update` for an affected action, and/or add an update timestamp to their action."
    },
    {
      "lang": "es",
      "value": "AshPostgres es la capa de datos PostgreSQL para Ash Framework. A partir de la versión 2.0.0 y antes de la versión 2.4.10, en ciertas situaciones muy específicas, era posible omitir las políticas de una acción de actualización. Esto solo ocurría en acciones de actualización \"vacías\" (sin campos de cambio) y permitía que se ejecutaran sus ganchos (efectos secundarios) cuando no deberían haberse realizado. Tenga en cuenta que esto no permite leer datos nuevos a los que el usuario no debería haber tenido acceso, solo activa un efecto secundario que un usuario no debería haber podido activar. Para ser vulnerable, un usuario afectado debe tener una acción de actualización que se encuentre en un recurso sin atributos que contengan un \"valor predeterminado de actualización\" (por ejemplo, marca de tiempo update_at); se puede realizar de forma atómica; no tiene `require_atomic? false`; tiene al menos un autorizador (normalmente `Ash.Policy.Authorizer`); y tiene al menos un `change` (en el bloque `changes` del recurso o en la acción misma). Aquí es donde se realizarían los efectos secundarios cuando no deberían haberse realizado. Este problema se ha corregido en `2.4.10` de `ash_postgres`. Hay varios workarounds disponibles. Los usuarios potencialmente afectados pueden determinar que ninguna de sus acciones es vulnerable utilizando un script que los fabricantes proporcionan en el Aviso de seguridad de GitHub, agregar `require_atomic? false` a cualquier acción de actualización potencialmente afectada, reemplazar cualquier uso de `Ash.update` con `Ash.bulk_update` para una acción afectada y/o agregar una marca de tiempo de actualización a su acción."
    }
  ],
  "metrics": {
    "cvssMetricV31": [
      {
        "source": "security-advisories@github.com",
        "type": "Secondary",
        "cvssData": {
          "version": "3.1",
          "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "baseScore": 5.3,
          "baseSeverity": "MEDIUM",
          "attackVector": "NETWORK",
          "attackComplexity": "LOW",
          "privilegesRequired": "NONE",
          "userInteraction": "NONE",
          "scope": "UNCHANGED",
          "confidentialityImpact": "NONE",
          "integrityImpact": "LOW",
          "availabilityImpact": "NONE"
        },
        "exploitabilityScore": 3.9,
        "impactScore": 1.4
      }
    ]
  },
  "weaknesses": [
    {
      "source": "security-advisories@github.com",
      "type": "Secondary",
      "description": [
        {
          "lang": "en",
          "value": "CWE-552"
        }
      ]
    }
  ],
  "references": [
    {
      "url": "https://elixirforum.com/t/empty-update-action-with-policies/66954",
      "source": "security-advisories@github.com"
    },
    {
      "url": "https://gist.github.com/zachdaniel/e49166b765978c48dfaf998d06df436e",
      "source": "security-advisories@github.com"
    },
    {
      "url": "https://github.com/ash-project/ash_postgres/commit/1228fcd851f29a68609e236f7d6a2622a4b5c4ba",
      "source": "security-advisories@github.com"
    },
    {
      "url": "https://github.com/ash-project/ash_postgres/security/advisories/GHSA-hf59-7rwq-785m",
      "source": "security-advisories@github.com"
    }
  ]
}